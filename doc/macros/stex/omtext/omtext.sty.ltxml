package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;
DeclareOption('noindex','');
RequirePackage('sref');
RequirePackage('xspace');
RequirePackage('modules');
RequirePackage('lxRDFa');
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt,autoClose=>1,autoOpen=>1);
Tag('omdoc:CMP', afterOpen => sub {AssignValue('_LastSeenCMP', $_[1], 'global');return;});#$
DefParameterType('IfBeginFollows', sub {
   my ($gullet) = @_;
   $gullet->skipSpaces;
                   my $next = $gullet->readToken;
                   $gullet->unread($next);
                   $next = ToString($next);
                   #Hm, falling back to regexp handling, the $gullet->ifNext approach didn't work properly
                   return 1 unless ($next=~/^\\begin/);
                   return;
                 },
 reversion=>'', optional=>1);
DefKeyVal('omtext','functions','CommaList');
DefKeyVal('omtext','display','Semiverbatim');
DefKeyVal('omtext','for','Semiverbatim');
DefKeyVal('omtext','from','Semiverbatim');
DefKeyVal('omtext','type','Semiverbatim');
DefKeyVal('omtext','title','Plain'); #Math mode in titles.
DefKeyVal('omtext','start','Plain'); #Math mode in start phrases
DefKeyVal('omtext','theory','Semiverbatim');
DefKeyVal('omtext','continues','Semiverbatim');
DefKeyVal('omtext','verbalizes','Semiverbatim');
DefEnvironment('{omtext} OptionalKeyVals:omtext',
  "<omdoc:omtext "
     . "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')() "
     . "?&KeyVal(#1,'type')(type='&KeyVal(#1,'type')')() "
     . "?&KeyVal(#1,'for')(for='&KeyVal(#1,'for')')() "
             . "?&KeyVal(#1,'from')(from='&KeyVal(#1,'from')')()>"
  . "?&KeyVal(#1,'title')(<dc:title>&KeyVal(#1,'title')</dc:title>)()"
  .     "?&KeyVal(#1,'start')(<ltx:text class='startemph'>&KeyVal(#1,'start')</ltx:text>)()"
                  .     "#body"
                 ."</omdoc:omtext>");
DefKeyVal('phrase','id','Semiverbatim');
DefKeyVal('phrase','style','Semiverbatim');
DefKeyVal('phrase','class','Semiverbatim');
DefKeyVal('phrase','index','Semiverbatim');
DefKeyVal('phrase','verbalizes','Semiverbatim');
DefKeyVal('phrase','type','Semiverbatim');
DefKeyVal('phrase','only','Semiverbatim');
DefConstructor('\phrase OptionalKeyVals:phrase {}',
       "<ltx:text %&KeyVals(#1) ?&KeyVal(#1,'only')(rel='beamer:only' content='&KeyVal(#1,'only')')()>#2</ltx:text>");
DefConstructor('\nlex{}',
  "<ltx:text class='nlex'>#1</ltx:text>");
DefConstructor('\nlcex{}',
  "<ltx:text class='nlcex'>#1</ltx:text>");
DefConstructor('\sinlinequote [] {}',
              "<ltx:quote type='inlinequote'>"
               . "?#1(<dc:source>#1</dc:source>\n)()"
               . "#2"
            . "</ltx:quote>");
DefEnvironment('{sblockquote} []',
  "<ltx:quote>?#1(<ltx:note role='source'>#1</ltx:note>)()#body</ltx:quote>");
DefConstructor('\lec{}',
   "\n<omdoc:note type='line-end-comment'>#1</omdoc:note>");
RawTeX('
\newcommand\mygraphics[2][]{\includegraphics[#1]{#2}}
\newcommand\mycgraphics[2][]{\begin{center}\includegraphics[#1]{#2}\end{center}}
\newcommand\mybgraphics[2][]{\fbox{\includegraphics[#1]{#2}\end{center}}}
');
DefConstructor('\indextoo[]{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\indexalt[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twintoo[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twinalt[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwinalt[]{}{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwintoo[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
Tag('omdoc:CMP', autoClose=>1, autoOpen=>1);
Tag('omdoc:omtext', autoClose=>1, autoOpen=>1);
Tag('ltx:p', autoClose=>1, autoOpen=>1);
DefConstructor('\footnote[]{}',
       "<omdoc:note type='foot' ?#1(mark='#1')>#2</omdoc:note>");
DefConstructor('\footnotemark[]',"");
DefConstructor('\footnotetext[]{}',
       "<omdoc:note class='foot' ?#1(mark='#1')>#2</omdoc:note>");
Tag('omdoc:omtext',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:omgroup',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:CMP',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idx',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ide',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idt',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:note',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:meta',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:resource',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:recurse',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:imports',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:theory',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ignore',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ref',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:p',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tabular',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:thead',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:td',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tr',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:caption',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:Math',afterOpen=>\&numberIt,afterClose=>\&locateIt);
sub numberIt {
  my($document,$node,$whatsit)=@_;
  my(@parents)=$document->findnodes('ancestor::*[@xml:id]',$node);
  my $prefix= (@parents ? $parents[$#parents]->getAttribute('xml:id')."." : '');
  my(@siblings)=$document->findnodes('preceding-sibling::*[@xml:id]',$node);
  my $n = scalar(@siblings)+1;
  my $id = ($node -> getAttribute('xml:id'));
  my $localname = $node->localname;
  $node->setAttribute('xml:id'=>$prefix."$localname$n") unless $id;
  my $about = $node -> getAttribute('about');
  $node->setAttribute('about'=>'#'.$node->getAttribute('xml:id')) unless $about;
  #Also, provide locators:
  my $locator = $whatsit->getProperty('locator');
  #Need to inherit locators if missing:
  $locator = (@parents ? $parents[$#parents]->getAttribute('stex:srcref') : '') unless $locator;
  if ($locator) {
    # There is a BUG with namespace declarations (or am I using the API wrongly??) which
    # does not recognize the stex namespace. Hence, I need to redeclare it...
    my $parent=$document->getNode;
    if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
      { # namespace not already declared?
        $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
      }
    $node->setAttribute('stex:srcref'=>$locator);
  }return;}

sub locateIt {
  my($document,$node,$whatsit)=@_;
  #Estimate trailer and locator:
  my $locator = $node->getAttribute('stex:srcref');
  return unless $locator; # Nothing to do here...
  my $trailer = $whatsit->getProperty('trailer');
  $trailer = $trailer->getLocator if $trailer;
  $trailer = $locator unless $trailer; # bootstrap
  # TODO: Both should be local, or both remote, any mixture or undefinedness will produce garbage
  my $file_path = LookupValue('SOURCEFILE');
  my $baselocal = LookupValue('BASELOCAL');
  # Hmm, we only care about relative paths, so let's just do a URL->pathname map
  $file_path=~s/^\w+\:\/// if $file_path;
  $baselocal=~s/^\w+\:\/// if $baselocal;
  if ($file_path && $baselocal && ($locator =~ s/^([^\#]+)\#/\#/)) {
    my $relative_prefix = pathname_relative($baselocal,$file_path);
    $relative_prefix =~ s/\/?\.\.$//; # Sigh, i'm abusing pathname_relative ...
     # ... it will always give an extra level up, as file_path is not a directory, but a file path
    my $relative_path = pathname_relative($file_path,$baselocal);
    $relative_prefix .= '/' if $relative_prefix;
    $relative_path = pathname_canonical($relative_prefix.$relative_path);
    $locator = $relative_path.$locator;
  }
  if ($locator =~ /^(.+from=\d+;\d+)/) {
    my $from = $1;
    if ($trailer =~ /(,to=\d+;\d+.+)$/) {
      my $to = $1;
      $locator = $from.$to;
    } else { Error("stex","locator",undef, "Trailer is garbled, expect nonsense in stex:srcref ..."); }
  } else { Error("stex","locator",undef, "Locator is garbled, expect nonsense in stex:srcref ..."); }
  my $parent = $document->getNode;
  if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
    { # namespace not already declared?
      $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
    }
  $node->setAttribute('stex:srcref' => $locator);
  return;
}
1;
