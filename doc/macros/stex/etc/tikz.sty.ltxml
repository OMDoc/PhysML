# -*- CPERL -*-
# /=====================================================================\ #
# | tikz.sty Implementation for LaTeXML                                 | #
# |=====================================================================| #
# | Not (yet) Part of LaTeXML:                                          | #
# | Copyright (c) 2006 Michael Kohlhase, released under the GPL         | #
# |---------------------------------------------------------------------| #
# | $HeadURL: https://svn.kwarc.info/repos/stex/trunk/sty/etc/tikz.sty.ltxml $ 
# | $Revision: 2358 $; last modified by $Author: kohlhase $              
# | $Date: 2013-09-20 07:41:36 +0200 (Fri, 20 Sep 2013) $
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <m.kohlhase@jacobs-university.de>          #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use File::Path;

RequirePackage('graphicx');
RequirePackage('xcolor');

RegisterNamespace('svg'=>"http://www.w3.org/2000/svg");

sub sourceDir {
  # Something weird is going on with the directory lookup under Mac...
  #my $pathname = $STATE->lookupValue('SOURCEFILE');
  #my($dir,$name,$ext)=pathname_split($pathname) if $pathname;
  my $dir;
  $dir = Cwd::cwd unless $dir;
  # NOTE: abs2rel doesn't work with Macs, so we omit it
  #$dir = File::Spec->abs2rel($dir); #Make filepath relative
  $dir;
}
our $SVGbaseName = 'svgimage';
sub pathSVGimage {
  my ($counter) = @_;
  my ($dir,$name) = sourceDir;
  my $uid="";
  $uid="$name".'_' if ($name);
  $dir."/".$uid.$SVGbaseName.'_'.$counter.".svg";
}
sub nextSVGimage {
  my $counter = LookupValue('svg_counter')||1;
  AssignValue('svg_counter'=>$counter+1,'global');
  pathSVGimage($counter);
}

# verbatim is a bit of special case;
# It looks like an environment, but it only ends with an explicit "\end{verbatim}" on it's own line.
# So, we'll end up doing things more manually.
# We're going to sidestep the Gullet for inputting, 
# and also the usual environment capture.
DefConstructorI(T_CS('\begin{tikzpicture}'),undef,
		"<omdoc:omlet action='display' show='embed'>"
	     .   '<omdoc:private>'
             .    "<omdoc:data format='image/svg+xml' href='&nextSVGimage()'/>"
	     .   '</omdoc:private>'
	     . "</omdoc:omlet>",
   beforeDigest=>[
     sub { $_[0]->bgroup; 
           AssignValue(current_environment=>'tikzpicture');
           my $source = $_[0]->getGullet->getSource;
           my $pathname = pathname_find($source,types=>['tex','']);
           $pathname =~ s/\.tex$//;
           AssignValue('top_module_as_import'=>'\importmodule['.$pathname.']{'.LookupValue('current_module')."}\n",'global');
           MergeFont(family=>'typewriter');
           # Digest(T_CS('\par')); # NO! See beforeConstruct!
         }],
   afterDigest=>[
     sub {
       my($stomach,$whatsit)=@_;
       $stomach->egroup;
       my $font = $whatsit->getFont;
       my $loc  = $whatsit->getLocator;
       my $end = "\\end{tikzpicture}";
       my $gullet = $stomach->getGullet;
       my $mouth = $gullet->getMouth;
       my @lines=();
       if (ref $mouth && $mouth !~ /Tokens/) {#If we have a file mouth
         @lines = $mouth->readRawLines($end);
         push(@lines,$end);
       } else {
         @lines = (split(/\n/,ToString($mouth)));
         $$gullet{mouth} =Tokens(); # There should be a better way to do this via the Gullet API...
       }
       #Take only nonempty lines
       @lines = grep(/^.+/,@lines);
       my $tikzcontent = "\\begin{tikzpicture}\n".join("\n",@lines)."\n";
       AssignValue('tikz_content'=>(LookupValue('tikz_content')||"").$tikzcontent,'global');
       AssignValue('tikz_envs'=>(LookupValue('tikz_envs')||0)+1,'global');
       # Note last line ends up as Whatsit's "trailer"
       # DG: Perl issue here: LaTeXML::Box->new runs into Fatals when used in map? 
       #     The explicit version works though ... I would love to know why the arrow fails
       my @toks = map {LaTeXML::Box::new('LaTeXML::Box',$_,$font,$loc,T_OTHER($_)) if $_;} @lines;
       $whatsit->setBody(@toks);
       return; }],
   beforeConstruct=>sub { $_[0]->maybeCloseElement('ltx:p'); },
   afterConstruct=>sub {
     my ($document,$whatsit) = @_;
     #Generate SVG, once per document (once the last tikzpicture has been expanded)
     my $envs = LookupValue('tikz_envs');
     my $current = LookupValue('after_constr_tikz_envs')||1;
     AssignValue('after_constr_tikz_envs'=>$current+1,'global');
     return unless $current==$envs;
     #Important: based on 'htlatex' !;
     unless (LookupValue('svg_generated')) {
       AssignValue('svg_generated'=>1,'global');
       my $tikzcontent = LookupValue('tikz_content');
       my $tikzlibraries="";
       my $clib = PopValue('tikzlibraries');
       while (defined $clib) {
         $tikzlibraries .= '\usetikzlibrary{'.$clib."} \n";
         $clib = PopValue('tikzlibraries');
       }
       #Prepare stub Tikz document
       my $paths = LookupValue('defpath');
       my $defpaths="";
       foreach (keys %$paths) { #Collect user-defined paths
         my $cpath = $$paths{$_};
         $defpaths.="\\defpath{$_}{".$cpath."}\n";
       }
       my $preamble = LookupValue("_preamble_loaded");
       my $tikzdoc;
       $preamble = "\\input{".Cwd::realpath(File::Spec->rel2abs($preamble))."}\n" if $preamble;
       $preamble = "\\documentclass{article}\n" unless $preamble;
         # Preamble MISSING:
         $tikzdoc = $preamble
         . '\def\pgfsysdriver{pgfsys-tex4ht.def}'."\n" #Note: the tikz driver
	 . "\\usepackage{graphicx}\n"
	 . "\\usepackage{tikz} \n"
         . "\\usetikzlibrary{shapes}\n"
         . "\\usetikzlibrary{arrows}\n"
	 . $tikzlibraries
	 . "\\usepackage{stex} \n"
         . $defpaths
	 . (LookupValue('top_module_as_import')||"")."\n"
	 . "\\begin{document} \n"
	 . $tikzcontent
	 . "\\end{document} \n";

       my $dir = sourceDir;
       #mkdir("$dir/tikztmp") unless -e "$dir/tikztmp";
       open(TIKZTMP,">$dir/tikztemp.tex");
       print TIKZTMP $tikzdoc;
       close TIKZTMP;
       #Make pass with tex4ht functionality, to generate SVG
       Info("Invoking htlatex to generate SVG for Tikz images...\n");
       my @info;
       eval {
         local $SIG{ALRM} = sub { die "htlatex fail\n"; };
         alarm 120; #Timeout if  not done withing one minute
         @info = `htlatex tikztemp.tex "xhtml,mathml-" " -cunihtf" "-cvalidate" 2>&1`;
         alarm 0;
       };
       if ($@) {
         Fatal("htlatex timed out while converting Tikz sources. Examine source at tikztemp.tex.");
       }
       
       @info = grep(/^[!]|l\.|(--- error)/, @info);
       Info(join("",@info)) if @info;
       #Rename results and clean temps
       foreach (1..LookupValue('tikz_envs')) {
         rename "$dir/tikztemp-".$_.".svg", pathSVGimage($_);
       }
       #unlink <$dir/tikztemp*>;
       
       #Insert SVG content into the data elements:
       my $docel = $document->getDocument->documentElement;
       if(! defined $docel->lookupNamespaceURI("omdoc")){
         $docel->setNamespace("http://omdoc.org/ns","omdoc",0); }
       my @dataEls = $docel->findnodes('//omdoc:data[@format=\'image/svg+xml\']');
       foreach my $data(@dataEls) {
         my $location = $data->getAttribute('href');
         next unless -e $location;
         my $parser = XML::LibXML->new();
         my $svgDOM = $parser->parse_file($location);
         $data->removeAttribute('href');
         $data->addChild($svgDOM->documentElement);
         if(! defined $docel->lookupNamespaceURI("svg")){ # namespace not already declared?
           $docel->setNamespace("http://www.w3.org/2000/svg","svg",0); }
         #Cleanup image file
         #unlink($location);
       }
       #LaTeXML Daemon: Reset all global variables to avoid propagation to next source
       AssignValue('tikz_envs'=>undef,'global');
       AssignValue('tikz_content'=>undef,'global');
       AssignValue('svg_counter'=>undef,'global');
       AssignValue('after_constr_tikz_envs'=>undef,'global');
       AssignValue('top_module_as_import'=>undef,'global');
       AssignValue('svg_generated'=>undef,'global');
     }
   });


DefConstructor('\draw','');
DefConstructor('\node','');
DefConstructor('\foreach','');
DefConstructor('\x','');

## Load when converting with htlatex:
DefConstructor('\usetikzlibrary{}','',
	       afterDigest=>sub {
		 my ($stomach,$whatsit) = @_;
		 my $lib = ToString($whatsit->getArg(1));
		 PushValue('tikzlibraries',$lib);   });


###Hints:
#DefConstructor('\@includegraphicx OptionalMatch:* OptionalKeyVals:Gin Semiverbatim',
#	       "<ltx:graphics graphic='#3' options='#2?#1(,clip=true)'/>",
#	      alias=>'\includegraphics');


#**********************************************************************
1;
