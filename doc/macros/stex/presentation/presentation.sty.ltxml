# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

# DG: This binding is NOT generated via presentation.dtx be very
# careful not to erase it while running "make"!

# =======================================================
# 0. Introduce parameters:                              #
# =======================================================
# TODO: This MAX limit can certainly be done better...
our $MOST_ALLOWED_ARGUMENTS = 10;  #Currently no more than 10 arguments to \symdef.
DefKeyVal('mi','lbrack','Semiverbatim');
DefKeyVal('mi','rbrack','Semiverbatim');
DefKeyVal('mi','p','Semiverbatim');
DefKeyVal('mi','pi','Semiverbatim');
DefKeyVal('mi','pii','Semiverbatim'); #Why are we using this at mixfixai ?
DefKeyVal('mi','cd','Semiverbatim');
DefKeyVal('mi','name','Semiverbatim');
DefKeyVal('mi','nobrackets','Semiverbatim');
DefKeyVal('mii','lbrack','Semiverbatim');
DefKeyVal('mii','rbrack','Semiverbatim');
DefKeyVal('mii','p','Semiverbatim');
DefKeyVal('mii','pi','Semiverbatim');
DefKeyVal('mii','pii','Semiverbatim');
DefKeyVal('mii','cd','Semiverbatim');
DefKeyVal('mii','name','Semiverbatim');
DefKeyVal('mii','nobrackets','Semiverbatim');
DefKeyVal('miii','lbrack','Semiverbatim');
DefKeyVal('miii','rbrack','Semiverbatim');
DefKeyVal('miii','p','Semiverbatim');
DefKeyVal('miii','pi','Semiverbatim');
DefKeyVal('miii','pii','Semiverbatim');
DefKeyVal('miii','piii','Semiverbatim');
DefKeyVal('miii','cd','Semiverbatim');
DefKeyVal('miii','name','Semiverbatim');
DefKeyVal('miii','nobrackets','Semiverbatim');

# =======================================================
# 1. TeX API methods:                                   #
# =======================================================
DefMacro('\iprec','1000000');
DefMacro('\niprec','-1000000');
DefConstructor('\funapp{}{}','<ltx:XMApp>#1#2</ltx:XMApp>');
DefConstructor('\crossrefOp[]{}',
       "?#2(<ltx:XMApp role='CROSSREFOP'>"
              .  "<ltx:XMTok role='CROSSREFOP' cr='?#1(#1)(fun)'/>"
              .  "<ltx:XMWrap>#2</ltx:XMWrap>"
              ."</ltx:XMApp>)()",
   requireMath=>1);
DefConstructor('\parray{}{}','<ltx:XMArray>#2</ltx:XMArray>');
DefConstructor('\parrayline{}{}','<ltx:XMRow>#1<ltx:XMCell>#2</ltx:XMCell></ltx:XMRow>');
DefConstructor('\parraycell{}','<ltx:XMCell>#1</ltx:XMCell>');
# =======================================================
# 2. Core Presentation Formatter functionality:         #
# =======================================================
DefBriefFormatter('\assoc[]{}{}','\mixfixa[#1]{}{#3}{}{#2}');
DefBriefFormatter('\infix[]{}{}{}','\mixfixii[#1]{}{#3}{#2}{#4}{}');
DefMacro('\@use{}','\@@use{\ensuremath{#1 }}');
DefFormatter('\@@use{}', sub {
  my ($document,$args,%properties) = @_;
  #Notation created at \@symdef@construct@presentation
  my $current = $document->getNode;
  my $ltx_context = ($current->namespaceURI eq 'http://dlmf.nist.gov/LaTeXML');
  if (!$ltx_context) {
    $document->openElement('ltx:Math');
    $document->openElement('ltx:XMath');
  }
  if ($args->isMath) {$document->absorb($args);}
  else {  $document->insertElement('ltx:XMText',$args);}
  if (!$ltx_context) {
    $document->closeElement('ltx:XMath');
    $document->closeElement('ltx:Math');
  }},
 mode=>'inline_math');

DefMacro('\prefix[]{}{}','\@prefix[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}');
DefFormatter('\@prefix OptionalKeyVals:mi {}{}',
                 "<m:mrow>"
	       .    "#2"
               .    "<m:mrow>"
               .      "<m:mo fence='true'>(</m:mo>"
               .      "#3"
               .      "<m:mo fence='true'>)</m:mo>"
               .    "</m:mrow>"
               .  "</m:mrow>");
DefMacro('\postfix []{}{}','\@postfix[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}');
DefFormatter('\@postfix OptionalKeyVals:mi {}{}',
                 "<m:mrow>"
               .    "<m:mrow>"
               .      "<m:mo fence='true'>(</m:mo>"
               .      "#3"
               .      "<m:mo fence='true'>)</m:mo>"
               .    "</m:mrow>"
               .    "#2"
               .  "</m:mrow>");
DefMacro('\mixfixi[]{}{}{}',
         '\@mixfixi[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .             '{\ensuremath{\crossrefOp[fun]{#4}}}');
DefFormatter('\@mixfixi OptionalKeyVals:mi {}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixa[]{}{}{}{}',
         '\@mixfixa[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#4}}}'
        .              '{\ensuremath{\crossrefOp[fun]{\ensuremath{#5 }}}}');
DefMacro('\mixfixA[]{}{}{}{}',
         '\@mixfixa[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#4}}}'
        .              '{\ensuremath{\crossrefOp[fun]{\ensuremath{#5 }}}}');
DefFormatter('\@mixfixa OptionalKeyVals:mi {}{}{}{}',
          "<m:mrow>"
       .     "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .     "#2"
       .     "<omdoc:iterate name='args' "
       .         "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .       "<omdoc:separator>#5</omdoc:separator>"
       .       "<omdoc:render name='arg' "
       .         "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .     "</omdoc:iterate>"
       .     "#4"
       .     "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .   "</m:mrow>");
DefMacro('\mixfixii[]{}{}{}{}{}',
         '\@mixfixii[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#6}}}');
DefFormatter('\@mixfixii OptionalKeyVals:mi {}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4 #5 #6"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixia[]{}{}{}{}{}{}',
         '\@mixfixia[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#6}}}'
        .              '{\ensuremath{\crossrefOp[fun]{#7}}}');
DefMacro('\mixfixiA[]{}{}{}{}{}{}',
         '\@mixfixia[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .              '{\ensuremath{\crossrefOp[fun]{#6}}}'
        .              '{\ensuremath{\crossrefOp[fun]{#7}}}');
DefFormatter('\@mixfixia OptionalKeyVals:mii {}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4"
       .    "<omdoc:iterate name='args' "
       .        "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .      "<omdoc:separator>#7</omdoc:separator>"
       .      "<omdoc:render name='arg' "
       .        "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .    "</omdoc:iterate>"
       .    "#6"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixai[]{}{}{}{}{}{}',
         '\@mixfixai[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .'{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .'{\ensuremath{\crossrefOp[fun]{#6}}}'
        .'{\ensuremath{\crossrefOp[fun]{#7}}}');
DefFormatter('\@mixfixai OptionalKeyVals:mi {}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2"
       .    "<omdoc:iterate name='args' "
       .      "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .      "<omdoc:separator>#7</omdoc:separator>"
       .      "<omdoc:render name='arg' "
       .         "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .    "</omdoc:iterate>"
       .    "#4 #5 #6"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixiii[]{}{}{}{}{}{}{}',
         '\@mixfixiii[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
       .                '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
       .                '{\ensuremath{\crossrefOp[fun]{#6}}}{\ensuremath{#7 }}'
       .                '{\ensuremath{\crossrefOp[fun]{#8}}}');
DefFormatter('\@mixfixiii OptionalKeyVals:mi {}{}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4 #5 #6 #7 #8"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixaii[]{}{}{}{}{}{}{}{}',
         '\@mixfixaii[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
         .              '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
         .              '{\ensuremath{\crossrefOp[fun]{#6}}}{\ensuremath{#7 }}'
         .              '{\ensuremath{\crossrefOp[fun]{#8}}}'
         .              '{\ensuremath{\crossrefOp[fun]{#9}}}');
DefFormatter('\@mixfixaii OptionalKeyVals:mi {}{}{}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2"
       .    "<omdoc:iterate name='args' "
       .        "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .      "<omdoc:separator>#9</omdoc:separator>"
       .      "<omdoc:render name='arg' "
       .         "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .    "</omdoc:iterate>"
       .    "#4 #5 #6 #7 #8"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixiai[]{}{}{}{}{}{}{}{}',
         '\@mixfixiai[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#6}}}{\ensuremath{#7 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#8}}}'
        .                '{\ensuremath{\crossrefOp[fun]{#9}}}');
DefFormatter('\@mixfixiai OptionalKeyVals:mi {}{}{}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4"
       .    "<omdoc:iterate name='args' "
       .       "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .      "<omdoc:separator>#9</omdoc:separator>"
       .      "<omdoc:render name='arg' "
       .          "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .    "</omdoc:iterate>"
       .    "#6 #7 #8"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\mixfixiia[]{}{}{}{}{}{}{}{}',
         '\@mixfixiia[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#4}}}{\ensuremath{#5 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#6}}}{\ensuremath{#7 }}'
        .                '{\ensuremath{\crossrefOp[fun]{#8}}}'
        .                '{\ensuremath{\crossrefOp[fun]{#9}}}');
DefFormatter('\@mixfixiia OptionalKeyVals:mi {}{}{}{}{}{}{}{}',
         "<m:mrow>"
       .    "<m:mo egroup='fence' fence='true'>(</m:mo>"
       .    "#2 #3 #4 #5 #6"
       .    "<omdoc:iterate name='args' "
       .        "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
       .      "<omdoc:separator>#9</omdoc:separator>"
       .      "<omdoc:render name='arg' "
       .          "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
       .    "</omdoc:iterate>"
       .    "#8"
       .    "<m:mo egroup='fence' fence='true'>)</m:mo>"
       .  "</m:mrow>");
DefMacro('\prefixa[]{}{}{}','\@prefixa[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}{\ensuremath{\crossrefOp[fun]{#4 }}}');
DefFormatter('\@prefixa OptionalKeyVals:mi {}{}{}',
                 "<m:mrow>"
	       .    "#2"
               .    "<m:mrow>"
               .      "<m:mo fence='true'>(</m:mo>"
               .      "<omdoc:iterate name='args' "
               .          "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
               .        "<omdoc:separator>#4</omdoc:separator>"
               .        "<omdoc:render name='arg' "
               .            "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
               .      "</omdoc:iterate>"
              .      "<m:mo fence='true'>)</m:mo>"
               .    "</m:mrow>"
               .  "</m:mrow>");
DefMacro('\postfixa []{}{}{}','\@postfixa[#1]{\ensuremath{\crossrefOp[fun]{#2}}}{\ensuremath{#3 }}{\ensuremath{\crossrefOp[fun]{#4 }}}');
DefFormatter('\@postfixa OptionalKeyVals:mi {}{}{}',
                 "<m:mrow>"
               .    "<m:mrow>"
               .      "<m:mo fence='true'>(</m:mo>"
               .      "<omdoc:iterate name='args' "
               .          "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')>"
               .        "<omdoc:separator>#4</omdoc:separator>"
               .        "<omdoc:render name='arg' "
               .          "?&defined(&KeyVal(#1,'pi'))(precedence='&KeyVal(#1,'pi')')/>"
               .      "</omdoc:iterate>"
              .      "<m:mo fence='true'>)</m:mo>"
               .    "</m:mrow>"
               .    "#2"
               .  "</m:mrow>");
# =======================================================
# 2.2. LaTeXML Presentation Enhancements:               #
# =======================================================
DefMathRewrite(xpath=>'descendant-or-self::ltx:XMWrap[(@role="BIGOP" or @role="OP" or @role="ADDOP" or @role="BIGOP" or @role="OPEN" or @role="CLOSE" or @role="RELOP" or @role="MULOP") and (not(child::*[local-name() != "XMTok"])) and (not(child::*["SCRIPT" = substring(@role, string-length(@role) - 5)]))]',
 replace=>sub {
   my ($document,$node) = @_;
   # If we only have XMTok children and none of them has a role "script", concatenate:
   my $replacement = $node->cloneNode(0);
   my $content = $node->textContent;
   $replacement->appendText($content);
   $replacement->setName('ltx:XMTok');
   $document->getNode->appendChild($replacement);
 });
# =======================================================
# 3. Auxiliary Functions:                               #
# =======================================================
sub DefFormatter {
  my ($definition,$replacement,%properties)=@_;
  register_formatter($definition);
  DefConstructor($definition,$replacement,%properties,
      afterDigest=>\&compute_precedences,
      beforeConstruct=>\&attach_precedences,
      properties=>\&compute_presentation_properties,
 );}

sub DefBriefFormatter {
  my ($definition,$replacement)=@_;
  register_formatter($definition);
  DefMacro($definition,$replacement);
}

sub register_formatter {
  my ($definition)=@_;
  $definition=~/\\\W*(\w+)/;
  PushValue('presentation_formatters'=>$1);
}

sub compute_precedences {
  my ($stomach,$whatsit) = @_;
  my $keyval = $whatsit->getArg(1);
  return unless (defined $keyval && ($keyval=~/KeyVal/));
  my %kvhash = %{$keyval->getKeyVals};
  #Default p (operator precedence) if not set:
  my $default_precedence = LookupValue('default_precedence')||'10000';
  $keyval->setValue('p',$default_precedence) unless defined($keyval->getValue('p'));
  return unless exists $kvhash{'nobrackets'};
  foreach my $pi_var(qw(pi pii piii)) {
    $keyval->setValue($pi_var,-1000000) unless defined($keyval->getValue($pi_var));
  }
  my @precs = map { ToString(KeyVal($keyval,$_))||"" }
              map { 'pi'.('i' x $_) } 0..($MOST_ALLOWED_ARGUMENTS-1);
  my $argprec_attribute = join(" ",@precs)." ";
  $whatsit->setProperty('argprec',$argprec_attribute);
  return;
}#$

sub attach_precedences {
  my ($document,$whatsit)=@_;
  my $argprec = $whatsit->getProperty('argprec');
  my $keyval = $whatsit->getArg(1);
  my $p = ToString(KeyVal($keyval,'p')) if (defined $keyval && ($keyval=~/KeyVal/));
  my $rendering_element = $document->getNode;
  $rendering_element->setAttribute('argprec',$argprec) if $argprec;
  $rendering_element->setAttribute('precedence',$p) if $p;
  # All computed, now actually attach to <rendering>
}

sub compute_presentation_properties {
  my ($document,$whatsit)=@_;
  my $cd = LookupValue('module_cd');
  my $name = LookupValue('symdef_name');
  my $nargkey = ToString($name).'_args';
  my $nargs = LookupValue($nargkey);
  $nargs = 0 unless ($nargs);
  my %props = ('cd'=>$cd,'name'=>$name,'nargs'=>$nargs);
  return %props;}

1;
