% \iffalse meta-comment
% A LaTeX Class and Package for OMDoc Document Structures
% Copyright (c) 2009 Michael Kohlhase, all rights reserved
%               this file is released under the
%               LaTeX Project Public License (LPPL)
%
% The development version of this file can be found at
% $HeadURL: https://svn.kwarc.info/repos/stex/trunk/sty/omdoc/omdoc.dtx $
% \fi
%   
% \iffalse
%<package|cls>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{omdoc}[2012/12/10 v1.1 OMDoc document Structure]
%<cls>\ProvidesClass{omdoc}[2012/12/10 v1.1 OMDoc Documents]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{url,array,omdoc,omtext,float}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic,backend=bibtex]{biblatex}
\bibliography{kwarc}
\usepackage[eso-foot,today]{svninfo}
\svnInfo $Id: omdoc.dtx 2383 2013-10-18 06:03:31Z kohlhase $
\svnKeyword $HeadURL: https://svn.kwarc.info/repos/stex/trunk/sty/omdoc/omdoc.dtx $
\usepackage{stex-logo}
\usepackage{../ctansvn}
\usepackage{hyperref}
\makeindex
\floatstyle{boxed}
\newfloat{exfig}{thp}{lop}
\floatname{exfig}{Example}
\def\tracissue#1{\cite{sTeX:online}, \hyperlink{hstp://trac.kwarc.info/sTeX/ticket/#1}{issue #1}}
\begin{document}\DocInput{omdoc.dtx}\end{document}
%</driver>
% \fi
% 
%\iffalse\CheckSum{382}\fi
% 
% \changes{v0.1}{2006/1/17}{First Version}
% \changes{v0.2}{2006/7/11}{added OMDoc class}
% \changes{v0.3}{2007/09/09}{moved omtext and friends here from the statements package}
% \changes{v0.4}{2008/09/06}{added quotes}
% \changes{v0.5}{2008/03/28}{more package/class options}
% \changes{v0.7}{2009/11/24}{giving keyval arguments to the document environment}
% \changes{v1.0}{2010/05/25}{separated out \texttt{omtext.dtx}}
% \changes{v1.1}{2012/02/14}{integrated \texttt{etoolbox} package}
%
% 
% \GetFileInfo{omdoc.sty}
% 
% \MakeShortVerb{\|}
%
% \def\omdoc{OMDoc}
% \def\latexml{{\LaTeX}ML}
% \title{{\texttt{omdoc.sty/cls}}: Semantic Markup for Open Mathematical Documents in {\LaTeX}\thanks{Version {\fileversion} (last revised
%        {\filedate})}}
%    \author{Michael Kohlhase\\
%            Jacobs University, Bremen\\
%            \url{http://kwarc.info/kohlhase}}
% \maketitle
%
% \begin{abstract}
%   The |omdoc| package is part of the {\sTeX} collection, a version of {\TeX/\LaTeX} that
%   allows to markup {\TeX/\LaTeX} documents semantically without leaving the document
%   format, essentially turning {\TeX/\LaTeX} into a document format for mathematical
%   knowledge management (MKM).
%
%   This package supplies an infrastructure for writing {\omdoc} documents in {\LaTeX}.
%   This includes a simple structure sharing mechanism for {\sTeX} that allows to to move
%   from a copy-and-paste document development model to a copy-and-reference model, which
%   conserves space and simplifies document management. The augmented structure can be
%   used by MKM systems for added-value services, either directly from the {\sTeX}
%   sources, or after translation.
% \end{abstract}
%
%\newpage\tableofcontents\newpage
% 
%\begin{omgroup}[id=sec:STR]{Introduction}
%
%  The |omdoc| package supplies macros and environment that allow to label document
%  fragments and to reference them later in the same document or in other documents. In
%  essence, this enhances the document-as-trees model to
%  documents-as-directed-acyclic-graphs (DAG) model. This structure can be used by MKM
%  systems for added-value services, either directly from the {\sTeX} sources, or after
%  translation. Currently, trans-document referencing provided by this package can only
%  be used in the {\sTeX} collection.
% 
%  {\sTeX} is a version of {\TeX/\LaTeX} that allows to markup {\TeX/\LaTeX} documents
%  semantically without leaving the document format, essentially turning {\TeX/\LaTeX}
%  into a document format for mathematical knowledge management (MKM). The package
%  supports direct translation to the {\omdoc} format~\cite{Kohlhase:omdoc1.2}
%
%  DAG models of documents allow to replace the ``Copy and Paste'' in the source document
%  with a label-and-reference model where document are shared in the document source and
%  the formatter does the copying during document formatting/presentation.\ednote{talk
%    about the advantages and give an example.}\ednote{is there a way to load documents at
%    URIs in LaTeX?}\ednote{integrate with latexml's XMRef in the Math mode.}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:user]{The User Interface}\
% 
% The |omdoc| package generates four files: |omdoc.cls|, |omdoc.sty| and their {\latexml}
% bindings |omdoc.cls.ltxml| and |omdoc.sty.ltxml|. We keep the corresponding code
% fragments together, since the documentation applies to both of them and to prevent them
% from getting out of sync. The {\omdoc} class is a minimally changed variant of the
% standard |article| class that includes the functionality provided by |omdoc.sty|. Most
% importantly, |omdoc.cls| sets up the {\latexml} infrastructure and thus should be used
% if {\omdoc} is to be generated from the {\sTeX} sources. The rest of the documentation
% pertains to the functionality introduced by |omdoc.sty|.
%
% \begin{omgroup}[id=sec:user:options]{Package and Class Options}
% 
%   |omdoc.sty| has the \DescribeMacro{noindex}|noindex| package option, which allows to
%   suppress the creation of index entries. The \DescribeMacro{extrefs} option can be set
%   to activate multifile support, see~\ctancite{Kohlhase:sref} for details. 
% 
%   |omdoc.cls| accepts all options of the |omdoc.sty| (see~\sref{sec:user:options}) and
%   |article.cls| and just passes them on to these.  \ednote{describe them}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:user:struct]{Document Structure}
% 
%   The top-level \DescribeEnv{document}|document| environment is augmented with an
%   optional key/value argument that can be used to give metadata about the document. For
%   the moment only the \DescribeMacro{id}|id| key is used to give an identifier to the
%   \texttt{omdoc} element resulting from the {\latexml} transformation.
% 
%   \DescribeEnv{omgroup} The structure of the document is given by the |omgroup|
%   environment just like in {\omdoc}. In the {\LaTeX} route, the |omgroup| environment is
%   flexibly mapped to sectioning commands, inducing the proper sectioning level from the
%   nesting of |omgroup| environments. Correspondingly, the |omgroup| environment takes an
%   optional key/value argument for metadata followed by a regular argument for the
%   (section) title of the omgroup. The optional metadata argument has the keys
%   \DescribeMacro{id}|id| for an identifier, \DescribeMacro{creators}|creators| and
%   \DescribeMacro{contributors}|contributors| for the Dublin Core
%   metadata~\cite{DCMI:dmt03}; see~\ctancite{Kohlhase:dcm} for details of the format. The
%   \DescribeMacro{short}|short| allows to give a short title for the generated section.
% 
%   \sTeX automatically computes the sectioning level, from the nesting of |omgroup|
%   environments. But sometimes, we want to skip levels (e.g. to use a subsection* as an
%   introduction for a chapter). Therefore the |omdoc| package provides a variant
%   \DescribeEnv{blindomgroup}|blindomgroup| that does not produce markup, but increments
%   the sectioning level and logically groups document parts that belong together, but
%   where traditional document markup relies on convention rather than explicit
%   markup. The |blindomgroup| environment is useful e.g. for creating frontmatter at the
%   correct level. Example~\ref{fig:docstruct} shows a typical setup for the outer
%   document structure of a book with parts and chapters. We use two levels of
%   |blindomgroup|:
%   \begin{compactitem}
%   \item The outer one groups the introductory parts of the book (which we assume to have
%     a sectioning hierarchy topping at the part level). This |blindomgroup| makes sure
%     that the introductory remarks become a ``chapter'' instead of a ``part''.
%   \item Th inner one groups the frontmatter\footnote{We shied away from redefining the
%     |frontmatter| to induce a blindomgroup, but this may be the ``right'' way to go in
%     the future.} and makes the preface of the book a section-level construct. Note that
%     here the |display=flow| on the |omgroup| environment prevents numbering as is
%     traditional for prefaces. 
%   \end{compactitem}
%   \begin{exfig}
% \begin{verbatim}
% \begin{document}
% \begin{blindomgroup}
% \begin{blindomgroup}
% \begin{frontmatter}
% \maketitle\newpage
% \begin{omgroup}[display=flow]{Preface}
% ... <<preface>> ...
% \end{omgroup}
% \clearpage\setcounter{tocdepth}{4}\tableofcontents\clearpage
% \end{frontmatter}
% \end{blindomgroup}
% ... <<introductory remarks>> ...
% \end{blindomgroup}
% \begin{omgroup}{Introduction}
% ... <<intro>> ...
% \end{omgroup}
% ... <<more chapters>> ... 
% \bibliographystyle{alpha}\bibliography{kwarc}
% \end{document}
% \end{verbatim}\vspace*{-2em}
%   \caption{A typical Document Structure of a Book}\label{fig:docstruct}
% \end{exfig}
%
%
%   The \DescribeMacro{\currentsectionlevel}|\currentsectionlevel| macro supplies the name
%   of the current sectioning level, e.g. ``chapter'', or
%   ``subsection''. \DescribeMacro{\CurrentSectionLevel}|\CurrentSectionLevel| is the
%   capitalized variant. They are useful to write something like ``In this
%   |\currentsectionlevel|, we will\ldots'' in an |omgroup| environment, where we do not
%   know which sectioning level we will end up.
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:user:ignore]{Ignoring Inputs}
% 
% The \DescribeEnv{ignore}|ignore| environment can be used for hiding text parts from the
% document structure. The body of the environment is not PDF or DVI output unless the
% \DescribeMacro{showignores}|showignores| option is given to the |omdoc| class or
% |package|. But in the generated {\omdoc} result, the body is marked up with a |ignore|
% element. This is useful in two situations. For
% \begin{description}
% \item[editing] One may want to hide unfinished or obsolete parts of a document
% \item[narrative/content markup] In {\stex} we mark up narrative-structured documents. In
%   the generated {\omdoc} documents we want to be able to cache content objects that are
%   not directly visible. For instance in the |statements|
%   package~\ctancite{Kohlhase:smms} we use the |\inlinedef| macro to mark up phrase-level
%   definitions, which verbalize more formal definitions. The latter can be hidden by an
%   ignore and referenced by the |verbalizes| key in |\inlinedef|.
% \end{description}
% 
% \end{omgroup}
%
% \begin{omgroup}[id=sec:user:sharing]{Structure Sharing}
%
%   The \DescribeMacro{\STRlabel}|\STRlabel| macro takes two arguments: a label and the
%   content and stores the the content for later use by
%   \DescribeMacro{\STRcopy}|\STRcopy[|\meta{URL}|]{|\meta{label}|}|, which expands to the
%   previously stored content. If the |\STRlabel| macro was in a different file, then we
%   can give a URL \meta{URL} that lets {\latexml} generate the correct reference.
%
% \DescribeMacro{\STRsemantics} The |\STRlabel| macro has a variant |\STRsemantics|, where
% the label argument is optional, and which takes a third argument, which is ignored in
% {\LaTeX}. This allows to specify the meaning of the content (whatever that may mean) in
% cases, where the source document is not formatted for presentation, but is transformed
% into some content markup format. \ednote{make an example}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:user:colors]{Colors}
% 
%   For convenience, the |omdoc| package defines a couple of color macros for the |color|
%   package: For instance \DescribeMacro{\blue}|\blue| abbreviates |\textcolor{blue}|, so
%   that |\blue{|\meta{something}|}| writes \meta{something} in blue. The macros
%   \DescribeMacro{\red}|\red| \DescribeMacro{...}|\green|, |\cyan|, |\magenta|, |\brown|,
%   |\yellow|, |\orange|, |\gray|, and finally \DescribeMacro{\black}|\black| are
%   analogous.
% \end{omgroup}
% \end{omgroup}
%
% \begin{omgroup}[id=sec:user:misc]{Miscellaneous}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:limitations]{Limitations}
% 
% In this section we document known limitations. If you want to help alleviate them,
% please feel free to contact the package author. Some of them are currently discussed in
% the \sTeX TRAC~\cite{sTeX:online}. 
% \begin{compactenum}
% \item none reported yet
% \end{compactenum}
% \end{omgroup}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\printbibliography}\newpage
%
% \begin{omgroup}[id=sec:impl:cls]{Implementation: The OMDoc Class}
%
%   The functionality is spread over the |omdoc| class and package. The class provides the
%   |document| environment and the |omdoc| element corresponds to it, whereas the
%   package provides the concrete functionality.
% 
% |omdoc.dtx| generates four files: |omdoc.cls| (all the code between
% {\textsf{$\langle$*cls$\rangle$}} and {\textsf{$\langle$/cls$\rangle$}}), |omdoc.sty|
% (between {\textsf{$\langle$*package$\rangle$}} and
% {\textsf{$\langle$/package$\rangle$}}) and their {\latexml} bindings (between
% {\textsf{$\langle$*ltxml.cls$\rangle$}} and {\textsf{$\langle$/ltxml.cls$\rangle$}} and
% {\textsf{$\langle$*ltxml.sty$\rangle$}} and {\textsf{$\langle$/ltxml.sty$\rangle$
% respetively}}). We keep the corresponding code fragments together, since the
% documentation applies to both of them and to prevent them from getting out of sync.
%
% \begin{omgroup}[id=sec:impl:cls:options]{Class Options}
% To initialize the |omdoc| class, we declare and process the necessary options.  
% 
%    \begin{macrocode}
%<*cls>
\DeclareOption{showmeta}{\PassOptionsToPackage{\CurrentOption}{metakeys}}
\def\omdoc@class{article}
\DeclareOption{report}{\def\omdoc@class{report}\PassOptionsToPackage{\CurrentOption}{omdoc}}
\DeclareOption{book}{\def\omdoc@class{book}\PassOptionsToPackage{\CurrentOption}{omdoc}}
\DeclareOption{showignores}{\PassOptionsToPackage{\CurrentOption}{omdoc}}
\DeclareOption{showmods}{\PassOptionsToPackage{\CurrentOption}{modules}}
\DeclareOption{extrefs}{\PassOptionsToPackage{\CurrentOption}{sref}}
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{article}}
\ProcessOptions
%</cls>
%<*ltxml.cls>
# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;
use Cwd qw(abs_path);
DeclareOption('report',sub {PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption')))); }); 
DeclareOption('book',sub {PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption')))); }); 
DeclareOption('showignores',sub {PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption')))); }); 
DeclareOption('extrefs',sub {PassOptions('sref','sty',ToString(Digest(T_CS('\CurrentOption')))); }); 
DeclareOption(undef,sub {PassOptions('article','cls',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
%</ltxml.cls>
%    \end{macrocode}
%
% We load |article.cls|, and the desired packages. For the {\latexml} bindings, we make
% sure the right packages are loaded.
%
%    \begin{macrocode}
%<*cls>
\LoadClass{\omdoc@class}
\RequirePackage{etoolbox}
\RequirePackage{omdoc}
%</cls>
%<*ltxml.cls>
LoadClass('article');
RequirePackage('sref');
%</ltxml.cls>
%    \end{macrocode}
% \end{omgroup}
%
% \begin{omgroup}[id=sec:impl:cls:namespaces]{Setting up Namespaces and Schemata for LaTeXML}
%
% Now, we also need to register the namespace prefixes for {\latexml} to use. 
%    \begin{macrocode}
%<*ltxml.cls>
RegisterNamespace('omdoc'=>"http://omdoc.org/ns");
RegisterNamespace('om'=>"http://www.openmath.org/OpenMath");
RegisterNamespace('m'=>"http://www.w3.org/1998/Math/MathML");
RegisterNamespace('dc'=>"http://purl.org/dc/elements/1.1/");
RegisterNamespace('cc'=>"http://creativecommons.org/ns");
RegisterNamespace('stex'=>"http://kwarc.info/ns/sTeX");
RegisterNamespace('ltx'=>"http://dlmf.nist.gov/LaTeXML");
%</ltxml.cls>
%    \end{macrocode}
% Since we are dealing with a class, we need to set up the document type in the {\latexml}
% bindings. 
%    \begin{macrocode}
%<*ltxml.cls>
RelaxNGSchema('omdoc+ltxml',
        '#default'=>"http://omdoc.org/ns",
        'om'=>"http://www.openmath.org/OpenMath",
        'm'=>"http://www.w3.org/1998/Math/MathML",
        'dc'=>"http://purl.org/dc/elements/1.1/",
        'cc'=>"http://creativecommons.org/ns",
       'stex'=>"http://kwarc.info/ns/sTeX",
       'ltx'=>"http://dlmf.nist.gov/LaTeXML");
%</ltxml.cls>
%    \end{macrocode}
% Then we load the |omdoc| package, which we define separately in the next section so that
% it can be loaded separately\ednote{reword}
%    \begin{macrocode}
%<*ltxml.cls>
RequirePackage('omdoc');
%</ltxml.cls>
%    \end{macrocode}
% \end{omgroup}
%
% \begin{omgroup}[id=sec:impl:cls:document]{Beefing up the \texttt{document} environment}
%
% Now, we will define the environments we need.  The top-level one is the |document|
% environment, which we redefined so that we can provide keyval arguments.
%
% \begin{environment}{document}
%   For the moment we do not use them on the {\LaTeX} level, but the document identifier
%   is picked up by {\latexml}.
%    \begin{macrocode}
%<*cls>
\let\orig@document=\document
\srefaddidkey{document}
\renewcommand{\document}[1][]{\metasetkeys{document}{#1}\orig@document}
%</cls>
%<*ltxml.cls>
sub xmlBase {
  my $baseuri = LookupValue('URLBASE');
  $baseuri =~ s/\/$//g; # No trailing slashes
  my $baselocal = LookupValue('BASELOCAL');
  my $name = LookupValue('SOURCEFILE');
  my ($d,$f,$t);
  if ($name) {
    if ( pathname_is_url($name) ) {
      $name =~ s/^(\w+):\///;
    }
    ($d, $f,$t) = pathname_split($name);
    $t = LookupValue('cooluri') ? '' : ".$t";
  }
  else {
    #Error("expected","SOURCEFILE",undef,"Couldn't locate the current source being processed, SOURCEFILE was not set in \$STATE );
    #Tokenize('');
    # TODO: What is really the right way to work with xml:base?
    $f = ''; $t='';
  }
  my $cdir=q{};
  if (!pathname_is_url($baselocal)) { # Local conversion
	$cdir = pathname_relative(abs_path(pathname_cwd()),abs_path($baselocal)) if defined $baselocal;
    $cdir .= '/';
  }
  Tokenize($baseuri.'/'.$cdir.$f.$t);
}
DefEnvironment('{document} OptionalKeyVals:omdoc',
       "<omdoc:omdoc "
      .    "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')"
      .     "(?&Tokenize(&LookupValue('SOURCEBASE'))"
      .      "(xml:id='&Tokenize(&LookupValue('SOURCEBASE')).omdoc')()) "
      .    "?&Tokenize(&LookupValue('URLBASE'))"
      .    "(xml:base='&xmlBase()')()>"
     .  "#body"
      ."</omdoc:omdoc>",
  beforeDigest=> sub { AssignValue(inPreamble=>0); },
  afterDigest=> sub { $_[0]->getGullet->flush; return; });
Tag('omdoc:omdoc', 'afterOpen:late'=>\&insertFrontMatter);
%</ltxml.cls>
%    \end{macrocode}
% \end{environment}
% \end{omgroup}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:sty]{Implementation: OMDoc Package}
%
% \begin{omgroup}[id=sec:impl:options]{Package Options}
% 
% The initial setup for {\latexml}: 
%
%    \begin{macrocode}
%<*ltxml.sty>
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use Cwd qw(abs_path);
%</ltxml.sty>
%    \end{macrocode}
%
% We declare some switches which will modify the behavior according to the package
% options. Generally, an option |xxx| will just set the appropriate switches to true
% (otherwise they stay false).\ednote{need an implementation for {\latexml}}
%
%    \begin{macrocode}
%<*package>
\DeclareOption{showmeta}{\PassOptionsToPackage{\CurrentOption}{metakeys}}
\DeclareOption{showmods}{\PassOptionsToPackage{\CurrentOption}{modules}}
\newcount\section@level
\newif\ifshow@ignores\show@ignoresfalse
\def\omdoc@class{article}\section@level=2
\DeclareOption{report}{\def\omdoc@class{report}\section@level=1}
\newif\ifclass@book\class@bookfalse
\DeclareOption{book}{\def\omdoc@class{book}\section@level=0\class@booktrue}
\DeclareOption{showignores}{\show@ignorestrue}
\DeclareOption{extrefs}{\PassOptionsToPackage{\CurrentOption}{sref}}
\ProcessOptions
%</package>
%<*ltxml.sty>
DeclareOption('report','');
DeclareOption('book','');
DeclareOption('showignores','');
DeclareOption('extrefs','');
%</ltxml.sty>
%    \end{macrocode}
%
% Then we need to set up the packages by requiring the |sref| package to be loaded.
%
%    \begin{macrocode}
%<*package>
\RequirePackage{sref}
\RequirePackage{xspace}
\RequirePackage{comment}
%</package>
%<*ltxml.sty>
RequirePackage('sref'); 
RequirePackage('xspace'); 
RequirePackage('omtext');
%</ltxml.sty>
%    \end{macrocode}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:struct]{Document Structure}
% 
%   The structure of the document is given by the |omgroup| environment just like in
%   OMDoc. The hierarchy is adjusted automatically according to the {\LaTeX} class in
%   effect. 
% \begin{macro}{\currentsectionlevel}
%    \begin{macrocode}
%<*package>
\def\currentsectionlevel{document\xspace}%
\def\Currentsectionlevel{Document\xspace}%
%</package>
%<*ltxml.sty>
DefMacro('\currentsectionlevel','\@currentsectionlevel\xspace');
DefMacro('\Currentsectionlevel','\@Currentsectionlevel\xspace');
DefConstructor('\@currentsectionlevel',
               "<ltx:text class='omdoc-currentsectionlevel'>section</ltx:text>");
DefConstructor('\@CurrentSectionLevel',
               "<ltx:text class='omdoc-Currentsectionlevel'>Section</ltx:text>");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% 
% \begin{environment}{blindomgroup}
% \begin{macrocode}
%<*package>
\newcommand\at@begin@blindomgroup[1]{}
\newenvironment{blindomgroup}
{\advance\section@level by 1\at@begin@blindomgroup\setion@level}
{\advance\section@level by -1}
%</package>
%<*ltxml.sty> 
DefEnvironment('{blindomgroup} OptionalKeyVals:omgroup',
               "<omdoc:omgroup layout='invisible'"
               .   "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')()"
               .   "?&KeyVal(#1,'type')(type='&KeyVal(#1,'type')')()>\n"
	       . "#body\n"
	     . "</omdoc:omgroup>");
%</ltxml.sty>
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\omgroup@cl}
%   Convenience macro: defines the |\currentsectionlevel| macro from the keywords in the
%   arguments
%    \begin{macrocode}
%<*package>
\newcommand\omgroup@cl[2]{%
\def\currentsectionlevel{#1\xspace}%
\def\Currentsectionlevel{#2\xspace}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\omgroup@nonum}
%   convenience macro: |\omgroup@nonum{|\meta{level}|}{|\meta{title}|}| makes an unnumbered
%   sectioning with title \meta{title} at level \meta{level}.
%    \begin{macrocode}
\newcommand\omgroup@nonum[2]{%
\ifx\hyper@anchor\@undefined\else\phantomsection\fi%
\addcontentsline{toc}{#1}{#2}\@nameuse{#1}*{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\omgroup@num}
%   convenience macro: |\omgroup@nonum{|\meta{level}|}{|\meta{title}|}| makes numbered
%   sectioning with title \meta{title} at level \meta{level}. We have to check the |short|
%   key was given in the |omgroup| environment and -- if it is use it. But how to do that
%   depends on whether the |rdfmeta| package has been loaded.
%    \begin{macrocode}
\newcommand\omgroup@num[2]{\sref@label@id{\omdoc@sect@Name \@nameuse{the#1}}%
\ifx\omgroup@short\@empty\@nameuse{#1}{#2}%
\else\@ifundefined{rdfmeta@sectioning}{\@nameuse{#1}[\omgroup@short]{#2}}%
{\@nameuse{rdfmeta@#2@old}[\omgroup@short]{#2}}\fi}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{omgroup}
%    \begin{macrocode}
%<*package>
\srefaddidkey{omgroup}
\addmetakey{omgroup}{creators}
\addmetakey{omgroup}{date}
\addmetakey{omgroup}{contributors}
\addmetakey{omgroup}{type}
\addmetakey*{omgroup}{short}
\addmetakey*{omgroup}{display}
%    \end{macrocode}
% we define a switch for numbering lines and a hook for the beginning of groups: The
% \DescribeMacro{\at@begin@omgroup}|\at@begin@omgroup| macro allows customization. It is
% run at the beginning of the |omgroup|, i.e. after the section heading.
%    \begin{macrocode}
\newif\if@@num\@@numtrue
\newcommand\at@begin@omgroup[3][]{}
%    \end{macrocode}
%
% Then we define a helper macro that takes care of the sectioning magic. It comes with its
% own key/value interface for customization.
%
%    \begin{macrocode}
\def\@true{true}
\def\@false{false}
\addmetakey{omdoc@sect}{name}
\addmetakey{omdoc@sect}{Name}
\addmetakey[false]{omdoc@sect}{clear}[true]
\addmetakey{omdoc@sect}{ref}
\addmetakey[false]{omdoc@sect}{num}[true]
\newcommand\omdoc@sectioning[3][]{\metasetkeys{omdoc@sect}{#1}%
\ifx\omdoc@sect@clear\@true\cleardoublepage\fi%
\if@@num% numbering not overridden by frontmatter, etc.
\ifx\omdoc@sect@num\@true\omgroup@num{#2}{#3}\else\omgroup@nonum{#2}{#3}\fi
\omgroup@cl\omdoc@sect@name\omdoc@sect@Name
\else\omgroup@nonum{#2}{#3}\fi}
%    \end{macrocode}
%   now the environment itself. 
%    \begin{macrocode}
\newenvironment{omgroup}[2][]% keys, title
{\metasetkeys{omgroup}{#1}\sref@target%
\ifx\omgroup@display\st@flow\@@numfalse\fi
\if@frontmatter\@@numfalse\fi
%    \end{macrocode}
% now we construct the entries for the table of contents. They depend on whether
% |modules.sty| and |hyperref.sty| are loaded. 
%    \begin{macrocode}
\ifx\imported@modules\@undefined% modules.sty loaded?
\ifx\hyper@anchor\@undefined% hyperref.sty loaded? 
\def\addcontentsline##1##2##3{\addtocontents{##1}{\protect\contentsline{##2}{##3}{\thepage}}}
\else\def\addcontentsline##1##2##3{%
\addtocontents{##1}{\protect\contentsline{##2}{##3}{\thepage}{\@currentHref}}}
\fi% hypreref.sty loaded
\else% modules.sty loaded?
\ifx\hyper@anchor\@undefined% hyperref.sty loaded? 
\def\addcontentsline##1##2##3{%
\addtocontents{##1}{\protect\contentsline{##2}{\string\importmodules{\imported@modules}##3}{\thepage}}}
\else\def\addcontentsline##1##2##3{%
\addtocontents{##1}{\protect\contentsline{##2}{\string\importmodules{\imported@modules}##3}{\thepage}{\@currentHref}}}
\fi% hypreref.sty loaded
\fi% modules.sty loaded
%    \end{macrocode}
% now we only need to construct the right sectioning depending on the value of
% |\section@level|.
%    \begin{macrocode}
\advance\section@level by 1
\ifcase\section@level%
\or\omdoc@sectioning[name=part,Name=Part,clear,num]{part}{#2}%
\or\omdoc@sectioning[name=chapter,Name=Chapter,clear,num]{chapter}{#2}%
\or\omdoc@sectioning[name=section,Name=Section,num]{section}{#2}%
\or\omdoc@sectioning[name=subsection,Name=Subsection,num]{subsection}{#2}%
\or\omdoc@sectioning[name=subsubsection,Name=Subsubsection,num]{subsubsection}{#2}%
\or\omdoc@sectioning[name=paragraph,Name=Paragraph,ref=this paragraph]{paragraph}{#2}%
\or\omdoc@sectioning[name=subparagraph,Name=Subparagraph,ref=this subparagraph]{paragraph}{#2}%
\fi% \ifcase
\at@begin@omgroup[#1]\section@level{#2}}% for customization
{\advance\section@level by -1}
%</package>
%<*ltxml.sty> 
DefEnvironment('{omgroup} OptionalKeyVals:omgroup {}',
               "<omdoc:omgroup layout='sectioning'"
               .   "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')()"
               .   "?&KeyVal(#1,'type')(type='&KeyVal(#1,'type')')()>\n"
  	       . "<dc:title>#2</dc:title>\n"
	       . "#body\n"
	     . "</omdoc:omgroup>");
%</ltxml.sty>
%    \end{macrocode}
% \end{environment}
% 
% \end{omgroup}
%
% \begin{omgroup}[id=sec:user:docmatter]{Front and Backmatter}
% 
%   Index markup is provided by the |omtext| package~\cite{Kohlhase:smmtf:ctan}, so in the
%   |omdoc| package we only need to supply the corresponding |\printindex| command, if it
%   is not already defined
% \begin{macro}{\printindex}
%    \begin{macrocode}
%<*package>
\providecommand\printindex{\IfFileExists{\jobname.ind}{\input{\jobname.ind}}{}}
%</package>
%<*ltxml.sty>
DefConstructor('\printindex','<omdoc:index/>');
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\tableofcontents}
%   The table of contents already exists in {\LaTeX}, so we only need to provide a
%   {\latexml} binding for it.
%    \begin{macrocode}
%<*ltxml.sty>
DefConstructor('\tableofcontents',
               "<omdoc:tableofcontents level='&ToString(&CounterValue('tocdepth'))'/>");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% The case of the |\bibliography| command is similar
%
% \begin{macro}{\bibliography}
%    \begin{macrocode}
%<*ltxml.sty>
DefConstructor('\bibliography{}',"<omdoc:bibliography files='#1'/>");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{frontmatter}
%   |book.cls| already has a |\frontmatter| macro, so we have to redefine the front
%   matter environment in this case.
%    \begin{macrocode}
%<*package>
\newif\if@frontmatter\@frontmatterfalse
\ifclass@book
\renewenvironment{frontmatter}
{\@frontmattertrue\pagenumbering{roman}}
{\@frontmatterfalse\setcounter{page}{1}\pagenumbering{arabic}}
\else
\newenvironment{frontmatter}
{\@frontmattertrue\pagenumbering{roman}}
{\@frontmatterfalse\setcounter{page}{1}\pagenumbering{arabic}}
\fi
%</package>
%<*ltxml.sty>
DefEnvironment('{frontmatter}','#body');
%</ltxml.sty>
%    \end{macrocode}
% \end{environment}
% \end{omgroup}
%
% \begin{omgroup}[id=sec:impl:ignore]{Ignoring Inputs}
% \begin{environment}{ignore}
%    \begin{macrocode}
%<*package>
\ifshow@ignores
\addmetakey{ignore}{type}
\addmetakey{ignore}{comment}
\newenvironment{ignore}[1][]
{\metasetkeys{ignore}{#1}\textless\ignore@type\textgreater\bgroup\itshape}
{\egroup\textless/\ignore@type\textgreater}
\renewenvironment{ignore}{}{}\else\excludecomment{ignore}\fi
%</package>
%<*ltxml.sty>
DefKeyVal('ignore','type','Semiverbatim');
DefKeyVal('ignore','comment','Semiverbatim');
DefEnvironment('{ignore} OptionalKeyVals:ignore',
               "<omdoc:ignore  %&KeyVals(#1)>#body</omdoc:ignore>");
%</ltxml.sty>
%    \end{macrocode}
% \end{environment}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:share]{Structure Sharing}
%
% \begin{macro}{\STRlabel}
%    The main macro, it it used to attach a label to some text expansion. Later on, using the
%    |\STRcopy| macro, the author can use this label to get the expansion originally assigned.
%    \begin{macrocode}
%<*package>
\long\def\STRlabel#1#2{\STRlabeldef{#1}{#2}{#2}}
%</package>
%<*ltxml.sty>
DefConstructor('\STRlabel{}{}', sub {
  my($document,$label,$object)=@_;
  $document->absorb($object);
  $document->addAttribute('xml:id'=>ToString($label)) if $label; });
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\STRcopy}
%   The |\STRcopy| macro is used to call the expansion of a given label. In case the label
%   is not defined it will issue a warning.\ednote{MK: we need to do something about the
%   ref!}
%    \begin{macrocode}
%<*package>
\newcommand\STRcopy[2][]{\expandafter\ifx\csname STR@#2\endcsname\relax
\message{STR warning: reference #2 undefined!}
\else\csname STR@#2\endcsname\fi}
%</package>
%<*ltxml.sty>
DefConstructor('\STRcopy[]{}',"<omdoc:ref xref='#1##2'/>");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\STRsemantics}
%    if we have a presentation form and a semantic form, then we can use
%    \begin{macrocode}
%<*package>
\newcommand\STRsemantics[3][]{#2\def\@test{#1}\ifx\@test\@empty\STRlabeldef{#1}{#2}\fi}
%</package>
%<*ltxml.sty>
DefConstructor('\STRsemantics[]{}{}', sub {
  my($document,$label,$ignore,$object)=@_;
  $document->absorb($object);
  $document->addAttribute('xml:id'=>ToString($label)) if $label; });
%</ltxml.sty>#$
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\STRlabeldef}
%    This is the macro that does the actual labeling. Is it called inside |\STRlabel|
%    \begin{macrocode}
%<*package>
\def\STRlabeldef#1{\expandafter\gdef\csname STR@#1\endcsname}
%</package>
%<*ltxml.sty>
DefMacro('\STRlabeldef{}{}', "");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:colors]{Colors}
% 
% \begin{environment}{blue, red, green, magenta}
%    We will use the following abbreviations for colors from |color.sty|
%    \begin{macrocode}
%<*package>
\def\black#1{\textcolor{black}{#1}}
\def\gray#1{\textcolor{gray}{#1}}
\def\blue#1{\textcolor{blue}{#1}}
\def\red#1{\textcolor{red}{#1}}
\def\green#1{\textcolor{green}{#1}}
\def\cyan#1{\textcolor{cyan}{#1}}
\def\magenta#1{\textcolor{magenta}{#1}}
\def\brown#1{\textcolor{brown}{#1}}
\def\yellow#1{\textcolor{yellow}{#1}}
\def\orange#1{\textcolor{orange}{#1}}
%</package>
%    \end{macrocode}
% For the {\latexml} bindings, we go a generic route, we replace |\blue{#1}| by 
% |{\@omdoc@color{blue}\@omdoc@color@content{#1}}|. 
%    \begin{macrocode}
%<*ltxml.sty>
sub omdocColorMacro {
  my ($color, @args) = @_;
  my $tok_color = TokenizeInternal($color);
  (T_BEGIN, T_CS('\@omdoc@color'), T_BEGIN, $tok_color->unlist,
   T_END, T_CS('\@omdoc@color@content'), T_OTHER('['), $tok_color->unlist, T_OTHER(']'),
   T_BEGIN, $args[1]->unlist, T_END, T_END); }
DefMacro('\@omdoc@color{}', sub { MergeFont(color=>$_[1]->toString); return; });#$
%</ltxml.sty>
%    \end{macrocode}
% Ideally, here we will remove the optional argument and have a conversion module
% add the attribute at the end (or maybe add it just for math?)
% or, we can take the attributes for style from the current font ?
%    \begin{macrocode}
%<*ltxml.sty>
DefConstructor('\@omdoc@color@content[]{}',
  "?#isMath(#2)(<ltx:text ?#1(style='color:#1')()>#2</ltx:text>)");
foreach my $color(qw(black gray blue red green cyan magenta brown yellow orange)) {
  DefMacro("\\".$color.'{}', sub { omdocColorMacro($color, @_); }); }#$
%</ltxml.sty>
%    \end{macrocode}
% \end{environment}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:commands]{{\LaTeX} Commands we interpret differently}
%
%   The reinterpretations are quite simple, we either disregard presentational markup or
%   we re-interpret it in terms of {\omdoc}.
%    \begin{macrocode}
%<*ltxml.sty>
DefConstructor('\newpage','');
%</ltxml.sty>
%    \end{macrocode}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:impl:misc]{Miscellaneous}
% Some shortcuts that use math symbols but are not mathematical at all; in particular,
% they should not be translated by {\latexml}.
%
%    \begin{macrocode}
%<*package>
\newcommand\hateq{\ensuremath{\hat=}\xspace}
\newcommand\hatequiv{\ensuremath{\hat\equiv}\xspace}
\newcommand\textleadsto{\ensuremath{\leadsto}\xspace}
%</package>
%<*ltxml.sty>
DefMacro('\hateq','\@hateq\xspace'); 
DefConstructor('\@hateq',"\x{2259}"); 
DefMacro('\hatequiv','\@hatequiv\xspace'); 
DefConstructor('\@hatequiv',"\x{2A6F}"); 
DefMacro('\textleadsto','\@textleadsto\xspace');
DefConstructor('\@textleadsto',"\x{219D}");
%</ltxml.sty>
%    \end{macrocode}
%
% \end{omgroup}
% 
% \begin{omgroup}{Leftovers}
%
%    \begin{macrocode}
%<*package>
\newcommand\baseURI[2][]{}
%</package>
%<*ltxml.sty>
DefMacro('\baseURI []Semiverbatim', sub {
	   my $baselocal = ToString(Expand($_[1]));
	   $baselocal = abs_path($baselocal) unless $baselocal=~/^(\w+):\/\//;
	   AssignValue('BASELOCAL'=>$baselocal,'global');
	   AssignValue('URLBASE'=>ToString(Expand($_[2])),'global');
	 });
%</ltxml.sty>
%    \end{macrocode}
% \ednote{this should be handled differently, omdoc.sty should include url and give a new
% macro for it, which we then use in omdoc}
% and finally, we need to terminate the file with a success mark for perl.
%    \begin{macrocode}
%<ltxml.sty|ltxml.cls>1;
%    \end{macrocode}
% \end{omgroup}
% \end{omgroup}
% \Finale
\endinput
% \iffalse
% LocalWords:  GPL structuresharing STR omdoc dtx stex CPERL LoadClass url dc
%%% Local Variables: 
%%% mode: doctex
%%% TeX-master: t
%%% End: 
% \fi
% LocalWords:  RequirePackage RegisterNamespace namespace xsl DocType ltxml dtd
% LocalWords:  ltx DefEnvironment beforeDigest AssignValue inPreamble getGullet
% LocalWords:  afterDigest keyval omgroup DefKeyVal Semiverbatim KeyVal srcf
% LocalWords:  OptionalKeyVals DefParameterType IfBeginFollows skipSpaces CMP
% LocalWords:  ifNext DefMacro needwrapper unlist DefConstructor omtext bgroup
% LocalWords:  useCMPItemizations RefStepItemCounter egroup beginItemize li di
% LocalWords:  beforeDigestEnd dt autoclose ul ol dl env showignores srcref Cwd
% LocalWords:  afterOpen LastSeenCMP autoClose DefCMPEnvironment proto ToString
% LocalWords:  addAttribute nlex nlcex omdocColorMacro args tok MergeFont qw
% LocalWords:  TokenizeInternal toString isMath foreach maybeCloseElement id'd
% LocalWords:  autoOpen minipage footnotesize scriptsize numberIt whatsit href
% LocalWords:  getAttribute setAttribute OMDoc RelaxNGSchema noindex xml lec
% LocalWords:  Subsubsection useDefaultItemizations refundefinedtrue sblockquote
% LocalWords:  DefCMPConstructor sinlinequote idx idt ide idp emph  extrefs sref
% LocalWords:  flushleft flushright DeclareOption PassOptions undef cls iffalse
% LocalWords:  ProcessOptions subparagraph ignoresfalse ignorestrue texttt ttin
% LocalWords:  texttt latexml fileversion maketitle newpage tableofcontents cwd
% LocalWords:  newpage ednote ctancite dmt03 smms inlinedef STRlabel STRcopy
% LocalWords:  STRlabel STRsemantics STRsemantics textcolor printbibliography
% LocalWords:  textsf langle textsf langle respetively orig renewcommand cdir
% LocalWords:  baseuri baseuri baselocal baselocal SOURCEFILE cooluri newif ifx
% LocalWords:  SOURCEBASE chapterfalse partfalse newcount ifshow chaptertrue
% LocalWords:  parttrue srefaddidkey newenvironment textbf compactenum showmeta
% LocalWords:  noindent noindent ignorespaces ifnum thepart thechapter regexp
% LocalWords:  thesection thesubsection thesubsubsection needswrapper itshape
% LocalWords:  textgreater renewenvironment excludecomment STRlabeldef csname
% LocalWords:  expandafter endcsname xref newcommand gdef doctex metakeys Hacky
% LocalWords:  metasetkeys addmetakey printindex providecommand jobname.ind
% LocalWords:  jobname.ind tocdepth hateq ensuremath xspace hatequiv equiv
% LocalWords:  textleadsto leadsto etoolbox blindomgroup blindomgroup docstruct
% LocalWords:  compactitem exfig vspace currentsectionlevel currentsectionlevel
% LocalWords:  ldots URLBASE ifclass bookfalse booktrue currentsetionlevel
% LocalWords:  nonum phantomsection nameuse numtrue numfalse contentsline unnum
% LocalWords:  thepage hypreref.sty ifcase cleardoublepage frontmatterfalse
% LocalWords:  frontmattertrue pagenumbering setcounter hyperref.sty
