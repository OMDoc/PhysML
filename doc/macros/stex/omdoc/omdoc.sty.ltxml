package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use Cwd qw(abs_path);
DeclareOption('report','');
DeclareOption('book','');
DeclareOption('showignores','');
DeclareOption('extrefs','');
RequirePackage('sref');
RequirePackage('xspace');
RequirePackage('omtext');
DefMacro('\currentsectionlevel','\@currentsectionlevel\xspace');
DefMacro('\Currentsectionlevel','\@Currentsectionlevel\xspace');
DefConstructor('\@currentsectionlevel',
               "<ltx:text class='omdoc-currentsectionlevel'>section</ltx:text>");
DefConstructor('\@CurrentSectionLevel',
               "<ltx:text class='omdoc-Currentsectionlevel'>Section</ltx:text>");
DefEnvironment('{blindomgroup} OptionalKeyVals:omgroup',
               "<omdoc:omgroup layout='invisible'"
               .   "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')()"
               .   "?&KeyVal(#1,'type')(type='&KeyVal(#1,'type')')()>\n"
       . "#body\n"
     . "</omdoc:omgroup>");
DefEnvironment('{omgroup} OptionalKeyVals:omgroup {}',
               "<omdoc:omgroup layout='sectioning'"
               .   "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')()"
               .   "?&KeyVal(#1,'type')(type='&KeyVal(#1,'type')')()>\n"
          . "<dc:title>#2</dc:title>\n"
       . "#body\n"
     . "</omdoc:omgroup>");
DefConstructor('\printindex','<omdoc:index/>');
DefConstructor('\tableofcontents',
               "<omdoc:tableofcontents level='&ToString(&CounterValue('tocdepth'))'/>");
DefConstructor('\bibliography{}',"<omdoc:bibliography files='#1'/>");
DefEnvironment('{frontmatter}','#body');
DefKeyVal('ignore','type','Semiverbatim');
DefKeyVal('ignore','comment','Semiverbatim');
DefEnvironment('{ignore} OptionalKeyVals:ignore',
               "<omdoc:ignore  %&KeyVals(#1)>#body</omdoc:ignore>");
DefConstructor('\STRlabel{}{}', sub {
  my($document,$label,$object)=@_;
  $document->absorb($object);
  $document->addAttribute('xml:id'=>ToString($label)) if $label; });
DefConstructor('\STRcopy[]{}',"<omdoc:ref xref='#1##2'/>");
DefConstructor('\STRsemantics[]{}{}', sub {
  my($document,$label,$ignore,$object)=@_;
  $document->absorb($object);
  $document->addAttribute('xml:id'=>ToString($label)) if $label; });
DefMacro('\STRlabeldef{}{}', "");
sub omdocColorMacro {
  my ($color, @args) = @_;
  my $tok_color = TokenizeInternal($color);
  (T_BEGIN, T_CS('\@omdoc@color'), T_BEGIN, $tok_color->unlist,
   T_END, T_CS('\@omdoc@color@content'), T_OTHER('['), $tok_color->unlist, T_OTHER(']'),
   T_BEGIN, $args[1]->unlist, T_END, T_END); }
DefMacro('\@omdoc@color{}', sub { MergeFont(color=>$_[1]->toString); return; });#$
DefConstructor('\@omdoc@color@content[]{}',
  "?#isMath(#2)(<ltx:text ?#1(style='color:#1')()>#2</ltx:text>)");
foreach my $color(qw(black gray blue red green cyan magenta brown yellow orange)) {
  DefMacro("\\".$color.'{}', sub { omdocColorMacro($color, @_); }); }#$
DefConstructor('\newpage','');
DefMacro('\hateq','\@hateq\xspace');
DefConstructor('\@hateq',"\x{2259}");
DefMacro('\hatequiv','\@hatequiv\xspace');
DefConstructor('\@hatequiv',"\x{2A6F}");
DefMacro('\textleadsto','\@textleadsto\xspace');
DefConstructor('\@textleadsto',"\x{219D}");
DefMacro('\baseURI []Semiverbatim', sub {
   my $baselocal = ToString(Expand($_[1]));
   $baselocal = abs_path($baselocal) unless $baselocal=~/^(\w+):\/\//;
   AssignValue('BASELOCAL'=>$baselocal,'global');
   AssignValue('URLBASE'=>ToString(Expand($_[2])),'global');
 });
1;
