# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Global;
use LaTeXML::Package;
use Data::Dumper;
# DG: This binding is NOT generated via modules.dtx be very
# careful not to erase it while running "make"!

# =======================================================
# 0. Introduce parameters:                              #
# =======================================================
DefKeyVal('Module','id','Semiverbatim');
DefKeyVal('Module','cd','Semiverbatim');
DefKeyVal('Module','creators','Semiverbatim');
DefKeyVal('symdef','bvars','CommaList');
DefKeyVal('symdef','bargs','CommaList');
DefKeyVal('symdef','id','Semiverbatim');
DefKeyVal('symdef','cd','Semiverbatim');
DefKeyVal('symdef','assocarg','Semiverbatim');

# =======================================================
# 1. TeX API methods:                                   #
# =======================================================
DefMacro('\coolurion',sub {AssignValue('cooluri'=>1);});
DefMacro('\coolurioff',sub {AssignValue('cooluri'=>0);});
DefMacro('\@mark@symdef@scope',sub {AssignValue('symdef_scope'=>
            (LookupValue('symdef_scope')||0)+1)});
DefMacro('\@unmark@symdef@scope',sub {AssignValue('symdef_scope'=>
            (LookupValue('symdef_scope')||0)-1)});
DefMacro('\defpath[]{}{}', sub {
   my ($gullet,$arg1,$arg2,$arg3)=@_;
   $arg2 = ToString($arg2);
   $arg3 = ToString($arg3);
   $arg3 =~ s/(\/+)$//g;
   $arg3 .= '/';
   my $paths = LookupValue('defpath')||{};
   $paths->{$arg2}=$arg3;
   AssignValue('defpath'=>$paths,'global');
   DefMacro('\\'.$arg2.' Semiverbatim',$arg3."#1");
 });

# =======================================================
# 2. Core Modules functionality:                        #
# =======================================================
DefEnvironment('{module} OptionalKeyVals:Module',
         "?#excluded()(<omdoc:theory"
         . "?&defined(&KeyVal(#1,'id'))(xml:id='&KeyVal(#1,'id')')(xml:id='#id')>"
         .   "?&defined(&KeyVal(#1,'creators'))(<dc:creator>&KeyVal(#1,'creators')</dc:creator>)()"
         .   "?&defined(&KeyVal(#1,'contributors'))(<dc:contributor>&KeyVal(#1,'contributors')</dc:contributor>)()"
         .   "#body"
         . "</omdoc:theory>)",
 afterDigestBegin=>sub {
   my($stomach, $whatsit)=@_;
   $whatsit->setProperty(excluded=>LookupValue('excluding_modules'));
   my $keys = $whatsit->getArg(1);
   my($id, $cd)=$keys && map(ToString($keys->getValue($_)),qw(id cd));
   # 1. Make sure we have an id or give a stub one otherwise:
   if (! $id) {
     # RefStepCounter deactivates any scopes for the current value of the
     # counter which causes the stored prop. of the env. not to be
     # visible anymore.
     $id = LookupValue('stex:theory:id') || 1;
     AssignValue('stex:theory:id', $id+1);
     $id = "theory$id";
   }
   $cd = $cd || $id;
   # 2. Update the catalog with paths for modules
   my $module_paths = LookupValue('module_paths') || {};
   $module_paths->{$id} = LookupValue('last_module_path');
   AssignValue('module_paths', $module_paths, 'global');
   # 3. Update the current module reference
   AssignValue(current_module => $id);
   AssignValue(module_cd => $cd);
   # 4. Activate the module in our current scope
   $STATE->activateScope("module:".$id);
   # 5. Activate parent scope, if present
   my $parent_module = LookupValue('parent_module');
   activate_module_definitions($parent_module) if $parent_module;
   # 6. Update the current parent module
   AssignValue("parent_of_$id"=>$parent_module,'global');
   AssignValue("parent_module"=>$id);
   return; },
 afterDigest => sub {
   # (after)7. Move a step up on the module ancestry
   AssignValue("parent_module" => LookupValue("parent_of_".LookupValue("parent_module")));
   return; });

DefConstructor('\usemodule OptionalKeyVals:importmodule {}',
   "<omdoc:uses from='?&KeyVal(#1,'load')(&canonical_omdoc_path(&KeyVal(#1,'load')))()\##2'/>",
   afterDigest=>\&importmoduleI);
DefConstructor('\importmodule OptionalKeyVals:importmodule {}',
   "<omdoc:imports from='?&KeyVal(#1,'load')(&canonical_omdoc_path(&KeyVal(#1,'load')))()\##2'/>",
   afterDigest=> \&importmoduleI);
# {importmodulevia} environment
DefMacro('\importmodulevia OptionalKeyVals:importmodule {}',
         '\endgroup\importmoduleI[#1]{#2}\begin{importmoduleenv}[#1]{#2}');
DefMacroI('\end{importmodulevia}',undef,'\end{importmoduleenv}');

DefEnvironment('{importmoduleenv} OptionalKeyVals:importmodule {}',
   "<omdoc:imports from='?&KeyVal(#1,'load')(&canonical_omdoc_path(&KeyVal(#1,'load')))()\##2'>"
  .  "<omdoc:morphism>#body</omdoc:morphism>"
  ."</omdoc:imports>");
DefConstructor('\importmoduleI OptionalKeyVals:importmodule {}', '',
   afterDigest=> \&importmoduleI );
DefConstructor('\vassign[]{}{}',
    "<omdoc:requation>"
   .  "<ltx:Math><ltx:XMath>#2</ltx:XMath></ltx:Math>"
   .  "<ltx:Math><ltx:XMath>#3</ltx:XMath></ltx:Math>"
   ."</omdoc:requation>");
DefConstructor('\tassign[]{}{}',
    "<omdoc:requation>"
   .  "<om:OMOBJ><om:OMS cd='?#1(#1)(#lastImportModule)' name='#2'/></om:OMOBJ>"
   .  "<om:OMOBJ><om:OMS cd='#currentModule' name='#3'/></om:OMOBJ>"
   ."</omdoc:requation>",
   afterDigest=> sub {
     my ($stomach,$whatsit) = @_;
     $whatsit->setProperty('currentModule',LookupValue("current_module"));
     $whatsit->setProperty('lastImportModule',LookupValue("last_import_module"));
   });
DefConstructor('\ttassign[]{}{}',
    "<omdoc:requation>"
   .  "<om:OMOBJ><om:OMS cd='?#1(#1)(#lastImportModule)' name='#2'/></om:OMOBJ>"
   .  "<p>#3</p>"
   ."</omdoc:requation>",
   afterDigest=> sub {
     my ($stomach,$whatsit) = @_;
     $whatsit->setProperty('currentModule',LookupValue("current_module"));
     $whatsit->setProperty('lastImportModule',LookupValue("last_import_module"));
   });


DefConstructor('\importOMDocmodule OptionalSemiverbatim {}{}',
               "<omdoc:imports from='?#3(&canonical_omdoc_path(#3))\##2'/>",
  afterDigest=>sub{
    #Same as \importmodule, just switch second and third argument.
    my ($stomach,$whatsit) = @_;
    my $path = $whatsit->getArg(1);
    my $ouri = $whatsit->getArg(2);
    my $module = $whatsit->getArg(3);
    $whatsit->setArgs(($path, $module,$ouri));
    importmoduleI($stomach,$whatsit);
    return;
  });

DefConstructor('\metalanguage OptionalSemiverbatim {}',
   "<omdoc:imports type='metalanguage' from='?#1(&canonical_omdoc_path(#1))\##2'/>",
   afterDigest=> \&importmoduleI );

### this is a hack, we need to do more here, once we have decided what to do, see 
### https://svn.omdoc.org/repos/omdoc/doc/blue/slides-notes/note.pdf
DefConstructor('\adoptmodule OptionalSemiverbatim {}',
   "<omdoc:imports type='adoption' from='?#1(&canonical_omdoc_path(#1))\##2'/>",
   afterDigest=> \&importmoduleI );

DefConstructor('\conceptdef OptionalKeyVals:symboldec {}',
       "<omdoc:symbol "
      .  "?&KeyVal(#1,'id')(xml:id='&KeyVal(#1,'id')')"
      .                   "(xml:id='&makeNCName(&KeyVal(#1,'name')).def.sym')"
      .               "name='#1'>"
      .  "?&KeyVal(#1,'title')(<dc:title>&KeyVal(#1,'title')</dc:title>)()"
      .  "?&KeyVal(#1,'subject')(<dc:subject>&KeyVal(#1,'subject')</dc:subject>)()"
      .  "?&KeyVal(#1,'description')(<dc:description>&KeyVal(#1,'description')</dc:description>)()"
      ."</omdoc:symbol>\n");
DefMacro('\DefMathOp OptionalKeyVals:symdef {}', sub {
  my($self,$keyval,$pres)=@_;
  my $name = KeyVal($keyval,'name') if $keyval;
  #Rewrite this token
  my $scopes = $STATE->getActiveScopes;
  DefMathRewrite(xpath=>'descendant-or-self::ltx:XMath',match=>ToString($pres),
     replace=>sub{
       map {$STATE->activateScope($_);} @$scopes;
       $_[0]->absorb(Digest("\\".ToString($name)));
     });
  #Invoke symdef
  (Invocation(T_CS('\symdef'),$keyval,$name,undef,$pres)->unlist);
});

# Split into a definition and a rendering; imports must ignore the latter
DefMacro('\symdef OptionalKeyVals:symdef {}[]{}', sub {
  my($self,@args)=@_;
  ((Invocation(T_CS('\@mark@symdef@scope'))->unlist),
   (Invocation(T_CS('\@symdef@define@symbol'),@args)->unlist),
   (LookupValue('excluding_modules') ? ()
    : (Invocation(T_CS('\@symdef@deposit@presentation'), @args)->unlist)),
   (Invocation(T_CS('\@unmark@symdef@scope'))->unlist)); });

# =======================================================
# 2.1 Center-piece of the Module package:               #
#     the \@symdef definition logic                     #
# =======================================================
DefPrimitive('\@symdef@define@symbol OptionalKeyVals:symdef {}[]{}', sub {
  my($stomach,$keys,$cs,$nargs,$presentation)=@_;
  # 1. Bookkeeping and parameter bootstrapping
  my ($name,$cd,$role,$bvars,$bargs,@bvars,@bargs);
  ($name,$cd,$role)=$keys &&
    map($_ && $_->toString, map($keys->getValue($_), qw(name cd role)));
  ($bvars,$bargs) = $keys && map ($keys->getValue($_), qw(bvars bargs));
  @bvars = grep {defined $_ && $_ } map {ToString($_)} 
    map {$_->can('unlist') ? $_->unlist : $_} $bvars->getValues if defined $bvars;
  @bargs = grep {defined $_ && $_ } map {ToString($_)} 
    map {$_->can('unlist') ? $_->unlist : $_} $bargs->getValues if defined $bargs;
  $cd = LookupValue('module_cd') unless $cd;
  $name = $cs unless $name;
  #Store for later lookup
  AssignValue("symdef.".ToString($cs).".cd"=>ToString($cd),'global');
  AssignValue("symdef.".ToString($cs).".name"=>ToString($name),'global');
  $nargs = (ref $nargs ? $nargs->toString : $nargs || 0);
  my $module = LookupValue('current_module');
  my $scope = (($keys && ($keys->getValue('local') || '' eq 'true')) ? 'module_local' : 'module').":".$module;

  # 2. The Macro/Constructor Factory
  #   - responsible for creating the \symbolname command sequences as dictated by the \symdef
  DefMacroI("\\".$cs->toString,convertLaTeXArgs($nargs+1,'default'), sub {
     my ($gullet, $variant, @args) = @_;
     my $icvariant = ToString($variant);
     my $localpres = $presentation;
     if ($icvariant && ($icvariant ne 'default')) {
       $localpres = LookupValue($cs->toString.":$icvariant:pres");
       if (!$localpres) {
         Error("No variant named '$icvariant' found! Falling back to ".
         "default.\n Please consider introducing \\symvariant{".
         $cs->toString."}[$nargs]{$icvariant}{... your presentation ...}");
         $localpres = $presentation;
       }
     }
     # We need to digest the presentation here, so that we don't have to worry
     # about the right module definitions being visible - THEY ARE, exactly
     # during digestion in \@symdef
     if (LookupValue('symdef_scope')) {
       $localpres = symdef_assemble_presentation($nargs,$localpres,@args);
       $localpres = Digest($localpres);
     } else {
       # If it's not a symdef scope, we will never need the presentation, so don't do anything.
     }
     my $count = LookupValue(ToString($cs).'_counter') || 0;
     AssignValue(ToString($cs).":pres:$count",$localpres);
     AssignValue(ToString($cs).'_counter',$count+1);
     (Invocation(T_CS('\\@'.$cs->toString.'@construct'),$variant,@args)->unlist);
  },scope=>$scope);
  DefConstructorI('\\@'.$cs->toString.'@construct',convertLaTeXArgs($nargs+1,'default'), sub {
     my ($document,$icvariant,@mixed_tail_args) = @_;
     #Lookup the presentation from the State, if a variant:
     my @args = splice(@mixed_tail_args,0,$nargs);
     my %properties = @mixed_tail_args;
     my $localpres = $properties{presentation};
     $icvariant = ToString($icvariant);
     my %ic = ($icvariant ne 'default') ? (ic=>'variant:'.$icvariant) : ();
     $properties{isbound} = "BINDER" if (scalar(@bvars) || scalar(@bargs));
     my $wrapped;
     #Are we within a \symdef's rendering?
     my $symdef_scope=$properties{symdef_scope};
     if ($symdef_scope) {
       # Whenever in a symdef, just absorb the presentation
       $document->absorb($localpres);
     } else {
       if ($nargs == 0) {
   # Simple case - discourse flow, only a single XMTok
   # Referencing XMTok when not in \symdefs:
   $document->insertElement('ltx:XMTok',undef,%ic,name=>ToString($cs), meaning=>$name,omcd=>$cd,role => $role,scriptpos=>$properties{'scriptpos'});
       } else {
   # 2. Constructors with arguments
         # Referencing XMTok when not in \symdefs:
         $document->openElement('ltx:XMApp',%ic,scriptpos=>$properties{'scriptpos'},role=>$properties{'isbound'});
   $document->openElement('ltx:XMApp') if scalar(@bargs);
         $document->insertElement('ltx:XMTok',undef,%ic,name=>ToString($cs), meaning=>$name, omcd=>$cd, role=>$role, scriptpos=>$properties{'operator_scriptpos'});
   if (scalar(@bargs)) {
     foreach my $barg(@bargs) {
       $document->openElement('ltx:XMArg');
       $document->absorb($args[$barg-1]);
       $document->closeElement('ltx:XMArg');
     }
     $document->closeElement('ltx:XMApp');
   }
   my $arg_number=0;
         foreach my $carg (@args) {
     $arg_number++; next if (scalar(@bargs) && (grep {$arg_number == $_} @bargs));
           $document->openElement('ltx:XMArg');
           $document->absorb($carg);
           $document->closeElement('ltx:XMArg');
         }
         $document->closeElement('ltx:XMApp');
       }
     }},
   afterDigest => sub{
     my ($stomach,$whatsit) = @_;
     my $count = LookupValue(ToString($cs).'_aftercounter') || 0;
     $whatsit->setProperty('presentation',LookupValue(ToString($cs).":pres:$count"));
     $whatsit->setProperty('symdef_scope',LookupValue('symdef_scope'));
     AssignValue(ToString($cs).'_aftercounter',$count+1);
   },
   properties => {name=>$cs->toString, meaning=>$name,omcd=>$cd,role => $role},
   scope=>$scope);
   return; });


DefMacro('\@symdef@deposit@presentation  OptionalKeyVals:symdef {}[]{}', sub {
  my($self,$keys, $cs,$nargs,$presentation)=@_;
  # 1. First, we do some bookkeeping of symdef properties
  my($name,$cd,$role)=$keys && map($_ && $_->toString,map($keys->getValue($_), qw(name cd role)));
  $cd = LookupValue('module_cd') unless $cd;
  $name = $cs unless $name;
  $name = ToString($name);
  $nargs = ToString($nargs)||0;
  my $nargkey = $name.'_args';
  # 1.1. Store the symdef name for later use
  AssignValue('symdef_name'=>$name);
  # 1.2. Store the number of arguments for later use
  AssignValue($nargkey=>$nargs);
  # 2. Finally, we construct the XML of the presentation
  (Invocation(T_CS('\@symdef@construct@presentation'),
     $cs,
     (Tokens(T_OTHER($nargs))),
     symdef_assemble_presentation($nargs,$presentation),
     (Tokens(Explode($name))),
     (Tokens(Explode($cd))),
    $keys)->unlist);
});

DefConstructor('\@symdef@construct@presentation{}{}{}{}{} OptionalKeyVals:symdef', sub {
  my ($document,$cs,$nargs,$presentation,$name,$cd,$keys)=@_;
  my ($assocarg,$bvars,$bargs,@bvars,@bargs);
  ($assocarg,$bvars,$bargs) = $keys && (map {$keys->getValue($_)} qw(assocarg bvars bargs));
  $assocarg = ToString($assocarg)||0;
  @bvars = grep {defined $_ && $_ } map {ToString($_)} 
    map {$_->can('unlist') ? $_->unlist : $_} $bvars->getValues if defined $bvars;
  @bargs = grep {defined $_ && $_ } map {ToString($_)} 
    map {$_->can('unlist') ? $_->unlist : $_} $bargs->getValues if defined $bargs;
  my $appElement = 'om:OMA';
  $appElement = 'om:OMBIND' if (scalar(@bvars) || scalar(@bargs));
  my $root = $document->getDocument->documentElement;
  $name = ToString($name);
  my $id;
  $id = ToString($keys->getValue('id')) if $keys;
  $id = $name.".sym" unless $id;
  my ($pre_notation_symbol_element) = $root->findnodes(".//omdoc:notation[\@name='$name' and ".
                   "preceding-sibling::omdoc:symbol[1]/\@name
                                    = '$name']");
  # If no <symbol> has been generated for this definition, generate one:
  if (!$pre_notation_symbol_element) {
    $document->openElement("omdoc:symbol",(name=>$name,"xml:id"=>$id));
    $document->insertElement("dc:title",ToString($keys->getValue("title"))) if ($keys && $keys->getValue("title"));
    $document->insertElement("dc:subject",ToString($keys->getValue("subject"))) if ($keys && $keys->getValue("subject"));
    $document->insertElement("dc:description",ToString($keys->getValue("description"))) if ($keys && $keys->getValue("description"));
    $document->closeElement("omdoc:symbol");
  }
  # Generate a notation:
  $document->openElement("omdoc:notation",(name=>$name,cd=>$cd));
  #First, generate prototype:
  $nargs = ToString($nargs)||0;
  $document->openElement('omdoc:prototype');
  $document->openElement($appElement) if $nargs;
  my $cr="fun" if $nargs;
  $document->openElement('om:OMA') if (scalar(@bargs));
  $document->insertElement('om:OMS',undef,(cd=>$cd,name=>$name,cr=>$cr));
  if (scalar(@bargs)) {
    foreach my $barg(@bargs) {
      $document->insertElement('omdoc:expr',undef,(name=>"arg$barg"));
    }
    $document->closeElement('om:OMA');
  }
  if (scalar(@bvars) || scalar(@bargs)) {
    $document->openElement('om:OMBVAR');
    if ((scalar(@bvars)==1) && ($bvars[0] != $assocarg)) {
      $document->insertElement('omdoc:expr',undef,(name=>"arg".$bvars[0]));
    } else {
      $document->openElement('omdoc:exprlist',(name=>"args"));
      $document->insertElement('omdoc:expr',undef,(name=>"arg"));
      $document->closeElement('omdoc:exprlist');
    }
    $document->closeElement('om:OMBVAR');
  }
  for my $id (1..$nargs) {
    next if (grep {$id==$_} (@bvars,@bargs));
    if ($id!=$assocarg) {
      my $argname="arg$id";
      $document->insertElement('omdoc:expr',undef,(name=>"$argname"));
    } else {
      $document->openElement('omdoc:exprlist',(name=>"args"));
      $document->insertElement('omdoc:expr',undef,(name=>"arg"));
      $document->closeElement('omdoc:exprlist');
    }
  }
  $document->closeElement($appElement) if $nargs;
  $document->closeElement('omdoc:prototype');
  #Next, absorb rendering:
  $document->openElement("omdoc:rendering");
  $document->absorb($presentation);
  $document->closeElement("omdoc:rendering");
  $document->closeElement("omdoc:notation");
}, afterDigest=>sub {
  my ($stomach, $whatsit) = @_;
  my $keys = $whatsit->getArg(6);
  my $module = LookupValue('current_module');
  $whatsit->setProperties(for=>ToString($whatsit->getArg(1)));
  $whatsit->setProperty(role=>($keys ? $keys->getValue('role')
             : (ToString($whatsit->getArg(2)) ? 'applied'
          : undef)));
});

# =======================================================
# 2.2 Symvariant functionality:                         #
# =======================================================
DefMacro('\symvariant{}[]{}{}', sub {
  my($self,@args)=@_;
  ((Invocation(T_CS('\@mark@symdef@scope'))->unlist),
   (Invocation(T_CS('\@symvariant@assemble@presentation'), @args)->unlist),
  (Invocation(T_CS('\@symvariant@construct'),@args[0..$#args-1])->unlist),
  (Invocation(T_CS('\@unmark@symdef@scope'))->unlist));
});
 DefMacro('\@symvariant@assemble@presentation{}[]{}{}', sub {
   my($self,$cs,$nargs,$ic,$presentation)=@_;
   #my $localpres = symdef_assemble_presentation(ToString($nargs)||0,$presentation);
   $cs = ToString($cs);
   $ic = ToString($ic);
   $nargs = ToString($nargs);

   # Save presentation for future reference:
   AssignValue("$cs:$ic:pres"=>$presentation,'module:'.LookupValue('current_module'));
   my $localpres = symdef_assemble_presentation($nargs,$presentation);
   $localpres = Digest($localpres);
   # Save for constructor reference:
   AssignValue("$cs:$ic:rendering:pres"=>$localpres);
   return;
 });
 DefConstructor('\@symvariant@construct{}[]{}', sub {
  my($document,$cs,$nargs,$icvariant,%properties)=@_;
  $cs = ToString($cs);
  $nargs = ToString($nargs)||0;
  $icvariant = ToString($icvariant);
  my $localpres = $properties{presentation};
  #Notation created by \symdef
  #Create the rendering at the right place:
  my $cnode = $document->getNode;
  my $root = $document->getDocument->documentElement;
  my $name = LookupValue("symdef.".ToString($cs).".name") || $cs;
  # Fix namespace (the LibXML XPath problems...)
  $root->setNamespace("http://omdoc.org/ns","omdoc",0);
  my ($notation) = $root->findnodes(".//omdoc:notation[\@name='$name' and ".
                                    "preceding-sibling::omdoc:symbol[1]/\@name
                                    = '$name']");
  if (!$notation) {
    #No symdef found, raise error:
    Error("No \\symdef found for \\$cs! Please define symbol prior to introducing variants!");
    return;
  }
  $document->setNode($notation);
  $document->openElement('omdoc:rendering',("ic"=>"variant:$icvariant"));
  $document->absorb($localpres);
  $document->closeElement('omdoc:rendering');
  $document->setNode($cnode);
  return;
 },
 afterDigest => sub {
   my ($stomach,$whatsit) = @_;
   my $cs = ToString($whatsit->getArg(1));
   my $ic = ToString($whatsit->getArg(3));
   $whatsit->setProperty('presentation',LookupValue("$cs:$ic:rendering:pres"));
});

# =======================================================
# 2.3 Other Modular tools:                              #
# =======================================================
DefPrimitive('\abbrdef OptionalKeyVals:symdef {}[]{}', sub {
  my($stomach,$keys,$cs,$nargs,$presentation)=@_;
  my $module = LookupValue('current_module');
  my $scope = (($keys && ($keys->getValue('local') || '' eq 'true')) ? 'module_local' : 'module').":$module";
  DefMacroI("\\".$cs->toString,convertLaTeXArgs($nargs,''),$presentation,
   scope=>$scope);
  return; });

# =======================================================
# 2.3. Testing Semantic macros
# =======================================================
# *** we fake it for now
DefMacro('\symtest OptionalKeyVals:symtest []{}{}','');
DefMacro('\abbrtest OptionalKeyVals:symtest []{}{}','');

# =======================================================
# 3. Auxiliary routines:                                #
# =======================================================
# Activate the import tree (transitive closure) of the given module
sub activate_module_definitions {
  my($module,%ancestors)=@_;
  $module = ToString($module);
  %ancestors = ('__trace'=>[]) unless %ancestors;
  if (defined $ancestors{$module}) {
    my $trace = join(" -> ",(@{$ancestors{__trace}},$module));
    Fatal(":module \"$module\" leads to import cycle! \nTrace: $trace");
  } else {
    $ancestors{$module}=1;
    # Depth-first load definitions from used modules, disregarding cycles
    foreach my $used_module (@{ LookupValue("module_${module}_uses") || []}) {
      push @{$ancestors{__trace}}, $module;
      activate_module_definitions($used_module,%ancestors);
      pop @{$ancestors{__trace}};
    }
    # then load definitions for this module
    $STATE->activateScope("module:$module"); 
  }
}

# Resolve symbolic links and add an omdoc extension, when needed
sub canonical_omdoc_path {
  my ($mod)=@_; my $dest='';
  $mod = ToString($mod);
  if ($mod) {
    my $baselocal = LookupValue('BASELOCAL');
    my $cwd = pathname_cwd();
    $baselocal = $cwd unless $baselocal; # Bootstrap to the current directory
    my $mod_path;
    #We need a constellation of pathname_absolute invocations
    # to make sure that all symbolic links get resolved
    if ($mod=~/^(\w)+:\/\//) {
      # HTTP Workflow
      $mod_path=$mod;
      $mod_path=~s/^\w+\:\///;
      $baselocal =~ s/^\w+\:\///;
      # TODO: Should we do the same computations as for the local workflow,
      #       when the SOURCEFILE is set to an http:// path in the same domain as the url base?
      $dest =  pathname_relative($mod_path,$baselocal);
    } else {
      # Local filesystem workflow
      # TODO: Think about having a proper routine for this,
      #       code also used in omtext...
      $mod_path = pathname_absolute($mod,$cwd);
      my $relative_prefix = pathname_relative($baselocal,$mod_path);
      $relative_prefix =~ s/\/\.\.$//; # Sigh, i'm abusing pathname_relative ...
      # ... it will always give an extra level up, as file_path is not a directory, but a file path
      my $relative_path = pathname_relative($mod_path,$baselocal);
      my ($d,$f,$t) = pathname_split($relative_path);
      $dest="$relative_prefix/$d/$f";
    }
  }
  $dest.=".omdoc" if (ToString($mod) && !LookupValue('cooluri'));
  return Tokenize($dest); }

# Import a module, core routine

sub importmoduleI {
   my($stomach,$whatsit)=@_;
   my $keyval = $whatsit->getArg(1);
   my $file;
   $file = ToString(KeyVal($keyval,'load')) if $keyval;
   my $module = ToString($whatsit->getArg(2));
   my $containing_module = LookupValue('current_module');
   # 1. Bookkeeping
   AssignValue('last_import_module',$module);
   #set the relation between the current module and the one to be imported
   PushValue("module_".$containing_module."_uses"=>$module) if $containing_module;
   #check if we've already loaded this module file or no file path given
   my $cache_key = $file && pathname_absolute($file,pathname_cwd());
   if((!$file) || (LookupValue($cache_key.'_loaded'))) {
     # If so, just activate it:
     activate_module_definitions($module);
   } else {
     # Otherwise:
     my $gullet = $stomach->getGullet;
     # 1. mark as loaded
     AssignValue($cache_key.'_loaded' => 1, 'global');
     # 2. open a group for its definitions so that they are localized
     $stomach->bgroup;
     # 3. update the last module path
     AssignValue('last_module_path', $file);
     # 4. queue the closing tag for this module in the gullet where it will be executed
     #    after all other definitions of the imported module have been taken care of
     $gullet->unread(Invocation(T_CS('\end@module@scope'), Tokens(Explode($module)))->unlist);
     # 5. we only need to load the sms definitions without generating any xml output, so we set the flag to 1
     AssignValue('excluding_modules' => 1);
     # 6. queue this module's sms file in the gullet so that its definitions are imported
     LaTeXML::Package::InputDefinitions($file,type=>'sms',noltxml=>1);
   }
   return;
 }
DefPrimitive('\end@module@scope{}',sub {
 # Group all imported definitions so far under their named scope
 # i.e. close the group to encapsulate
 $_[0]->egroup;
 # Now that we are out of that named scope, we need to explicitly activate it
 # to make its definitions visible in the current module
 # Take care of any imported elements in this current module by activating it and all its dependencies
 activate_module_definitions(ToString(Digest($_[1])->toString));
 return; });

sub symdef_assemble_presentation {
  my($nargs,$presentation,@args)=@_;
  # Assemble a digestable presentation Tokens
  my @toks = $presentation->unlist;
  # Prepare for digestion, ensure a formatter is present:
  while(@toks && $toks[0]->equals(T_SPACE)){ shift(@toks); }  # Remove leading space

  # Wrap with \@use, unless already has a recognized formatter.
  my $registered_formatters = LookupValue('presentation_formatters')||[];
  my $formatters_regexp_string = join("|",grep (defined,@$registered_formatters));
  my $formatters_regexp = qr/$formatters_regexp_string/;
  # Full-blown scan, so that we don't have to use formatters only on the top-level
  # this might be quite slow and should be rethough ...
  my $wrapped;
  foreach (@toks) {
    if ($_->toString =~ /^\\\@?($formatters_regexp)$/) {
      $wrapped=1; last;
  }}
  $presentation = Invocation(T_CS('\@use'),$presentation) unless $wrapped;
  # Low level substitution.
  # When @args is undefined, we are creating a generic <omdoc:rendering>
  if ($nargs) {
    @args = map(Invocation(T_CS('\@SYMBOL'),T_OTHER("arg:".($_))),1..$nargs) unless scalar(@args);
    $presentation = Tokens(LaTeXML::Expandable::substituteTokens($presentation,@args));
  }
  #Tokens(Invocation(T_CS('\@ensuremath'),$presentation)->unlist); 
  $presentation;}
# =======================================================
# 4. Forgotten Stuff                                    #
# =======================================================
# this needs to be put into place, and maybe rethought. 
DefConstructor('\sinputref{}',"<omdoc:oref href='&canonical_omdoc_path(#1)' class='expandable'/>");
DefConstructor('\inputref{}',"<omdoc:oref href='&canonical_omdoc_path(#1)' class='expandable'/>");
DefConstructor('\includeref{}',"<omdoc:oref href='&canonical_omdoc_path(#1)' class='expandable'/>");

#DefPrimitive('\sinput Semiverbatim', sub {
#  my($stomach,$module)=@_;
#  my $GULLET = $stomach->getGullet;
#  $module = Digest($module)->toString;
#  AssignValue('file_'.$module.'_loaded' => 1, 'global');
#  $stomach->bgroup;
#  AssignValue('last_module_path', $module);
#  $GULLET->unread(Invocation(T_CS('\end@requiredmodule'),Tokens(Explode($module)))->unlist);
#  LaTeXML::Package::InputContents($module);
#  return;});

DefKeyVal('view','id','Semiverbatim');
DefKeyVal('view','from','Semiverbatim');
DefKeyVal('view','to','Semiverbatim');
DefKeyVal('view','title','Semiverbatim');
DefKeyVal('view','creators','Semiverbatim');
DefKeyVal('view','display','Semiverbatim');
DefMacroI(T_CS('\begin{view}'),'OptionalKeyVals:view {}{}', sub {
  my ($gullet, $keyvals, $from_arg, $to_arg) = @_;
  my $from = ToString(Expand($from_arg));
  my $to = ToString(Expand($to_arg));
  my $from_file = ToString(KeyVal($keyvals,'from'));
  my $to_file = ToString(KeyVal($keyvals,'to'));
  return (
    Tokenize("\\importmoduleI[load=$from_file]{$from}")->unlist,
    Tokenize("\\importmoduleI[load=$to_file]{$to}")->unlist,
    Invocation(T_CS('\begin{viewenv}'),$keyvals,$from_arg,$to_arg)->unlist
  );
}); 
DefMacroI('\end{view}',undef,'\end{viewenv}');

DefEnvironment('{viewenv} OptionalKeyVals:view {}{}',
   "<omdoc:theory-inclusion from='#2' to='#3'"
  .      " ?&defined(&KeyVal(#1,'id'))(xml:id='&KeyVal(#1,'id')')()>"
  .  "<omdoc:morphism>#body</omdoc:morphism>"
  ."</omdoc:theory-inclusion>");

# do the same for viewsketch, pity we cannot share some code. 
DefMacroI(T_CS('\begin{viewsketch}'),'OptionalKeyVals:view {}{}', sub {
  my ($gullet, $keyvals, $from_arg, $to_arg) = @_;
  my $from = ToString(Expand($from_arg));
  my $to = ToString(Expand($to_arg));
  my $from_file = ToString(KeyVal($keyvals,'from'));
  my $to_file = ToString(KeyVal($keyvals,'to'));
  return (
    Tokenize("\\importmoduleI[load=$from_file]{$from}")->unlist,
    Tokenize("\\importmoduleI[load=$to_file]{$to}")->unlist,
    Invocation(T_CS('\begin{viewsketchenv}'),$keyvals,$from_arg,$to_arg)->unlist
  );
}); 
DefMacroI('\end{viewsketch}',undef,'\end{viewsketchenv}');

DefEnvironment('{viewsketchenv} OptionalKeyVals:view {}{}',
   "<omdoc:theory-inclusion from='#2' to='#3'"
  .      " ?&defined(&KeyVal(#1,'id'))(xml:id='&KeyVal(#1,'id')')()>"
  .  "#body"
  ."</omdoc:theory-inclusion>");


1;
